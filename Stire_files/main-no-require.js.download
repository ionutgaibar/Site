if (typeof appCfg === "undefined") {
    console.warn('JWPlayer not present');
}

if (typeof $ === "undefined") {
    console.warn('jQuery not present');
}

if (typeof jwplayer === "undefined") {
    console.warn('JWPlayer not present');
}

/**
 * Main AppEngine Object
 *
 * @info For debug use in browser console <code>appEngine.dump();</code>
 *
 * @type {{ns, registrySet, registryGet, definitionSet, definitionGet, dump}}
 */
window.appEngine = (function (config, undefined) {
    // 'use strict';
    var _window = window;
    var cfg = config || {};
    var registry = {};
    var def = {};
    function nsFn (str) {
        var vs = str.split('.');
        var last = def;
        var n = vs.length;
        for (var i = 0; i < n; i++) {
            if (typeof last[vs[i]] !== "object") {
                last[vs[i]] = {};
            }
            last = last[vs[i]];
        }
        return last;
    }
    function nsSplit (str) {
        var vs = str.split('.');
        var n = vs.length - 1;
        var o1 = [];
        var o2 = vs[n];
        for (var i = 0; i < n; i++) {
            o1.push(vs[i]);
        }
        return {
            'path' : o1.join('.'),
            'file' : o2
        };
    }
    function registrySetFn (k, v) {
        registry[k] = v;
    }
    function registryGetFn (k) {
        return registry[k];
    }
    function definitionSetFn(key, def) {
        var ps = nsSplit(key);
        var obj = nsFn(ps.path);
        obj[ps.file] = def;
    }
    function definitionGetFn(key) {
        var ps = nsSplit(key);
        var obj = nsFn(ps.path);
        return obj[ps.file];
    }
    function dumpFn() {
        return {
            ns: nsFn,
            registrySet: registrySetFn,
            registryGet: registryGetFn,
            definitionSet: definitionSetFn,
            definitionGet: definitionGetFn,
            dump: dumpFn,
            _window: _window,
            cfg: cfg,
            registry: registry,
            def: def
        };
    }
    return {
        ns: nsFn,
        registrySet: registrySetFn,
        registryGet: registryGetFn,
        definitionSet: definitionSetFn,
        definitionGet: definitionGetFn,
        dump: dumpFn
    };
})({});

/**
 * Decorate AppEngine with 'app.utils.getAssetsBaseUrl'
 */
(function (appEngine) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.getAssetsBaseUrl',
        (function () {
            var url = window.appCfg.assetsBaseUrl;
            var urlDev = window.appCfg.assetsBaseDevUrl;
            return function (type) {
                if (type === 'dev') {
                    return urlDev;
                }
                return url;
            };
        })()
    );
    appEngine.definitionSet(
        'app.utils.getMobileAssetsBaseUrl',
        (function () {
            var url = window.appCfg.mobileAssetsBaseUrl;
            var urlDev = window.appCfg.mobileAssetsBaseDevUrl;
            return function (type) {
                if (type === 'dev') {
                    return urlDev;
                }
                return url;
            };
        })()
    );
    appEngine.definitionSet(
        'app.utils.isMobileEnv',
        (function () {
            var env = window.appCfg.assetsEnv;
            return function () {
                if (env === 'mobile') {
                    return true;
                }
                return false;
            };
        })()
    );
    appEngine.definitionSet(
        'app.utils.isEnvWithRedirActive',
        (function () {
            var env = window.appCfg.redirEnvActive;
            return function () {
                if (env) {
                    return true;
                }
                return false;
            };
        })()
    );
})(appEngine);

/**
 * Decorate AppEngine with 'app.utils.uniqid'
 */
(function (appEngine) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.uniqid',
        (function () {
            var id = 0;
            return function () {
                if (arguments[0] === 0) {
                    id = 0;
                }
                return id++;
            };
        })()
    );
})(appEngine);

/**
 * Decorate AppEngine with 'app.utils.randomstr'
 */
(function (appEngine) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.randomstr',
        (function () {
            return function (len) {
                var str = "";                                         // String result
                for(var i=0; i<len; i++){                             // Loop `len` times
                    var rand = Math.floor( Math.random() * 62 );        // random: 0..61
                    var charCode = rand+= rand>9? (rand<36?55:61) : 48; // Get correct charCode
                    str += String.fromCharCode( charCode );             // add Character to str
                }
                return str;       // After all loops are done, return the concatenated string
            };
        })()
    );
})(appEngine);

(function (appEngine) {
    appEngine.definitionSet(
        'app.utils.md5',
        (function () {

            var HEX_CHARS = "0123456789abcdef";
            var HEX_TABLE = {
                '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
                'a': 10, 'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15,
                'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15
            };

            var R = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
                5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21];

            var K = [0XD76AA478, 0XE8C7B756, 0X242070DB, 0XC1BDCEEE,
                0XF57C0FAF, 0X4787C62A, 0XA8304613, 0XFD469501,
                0X698098D8, 0X8B44F7AF, 0XFFFF5BB1, 0X895CD7BE,
                0X6B901122, 0XFD987193, 0XA679438E, 0X49B40821,
                0XF61E2562, 0XC040B340, 0X265E5A51, 0XE9B6C7AA,
                0XD62F105D, 0X02441453, 0XD8A1E681, 0XE7D3FBC8,
                0X21E1CDE6, 0XC33707D6, 0XF4D50D87, 0X455A14ED,
                0XA9E3E905, 0XFCEFA3F8, 0X676F02D9, 0X8D2A4C8A,
                0XFFFA3942, 0X8771F681, 0X6D9D6122, 0XFDE5380C,
                0XA4BEEA44, 0X4BDECFA9, 0XF6BB4B60, 0XBEBFBC70,
                0X289B7EC6, 0XEAA127FA, 0XD4EF3085, 0X04881D05,
                0XD9D4D039, 0XE6DB99E5, 0X1FA27CF8, 0XC4AC5665,
                0XF4292244, 0X432AFF97, 0XAB9423A7, 0XFC93A039,
                0X655B59C3, 0X8F0CCC92, 0XFFEFF47D, 0X85845DD1,
                0X6FA87E4F, 0XFE2CE6E0, 0XA3014314, 0X4E0811A1,
                0XF7537E82, 0XBD3AF235, 0X2AD7D2BB, 0XEB86D391];

            var jsmd5 = function(message) {
                var blocks = hasUTF8(message) ? UTF8toBlocks(message) : ASCIItoBlocks(message);
                var h0 = 0x67452301;
                var h1 = 0xEFCDAB89;
                var h2 = 0x98BADCFE;
                var h3 = 0x10325476;

                for(var i = 0, length = blocks.length;i < length;i += 16)
                {
                    var a = h0;
                    var b = h1;
                    var c = h2;
                    var d = h3;
                    var f, g, tmp, x, y;

                    for(var j = 0;j < 64;++j)
                    {
                        if(j < 16)
                        {
                            // f = (b & c) | ((~b) & d);
                            f = d ^ (b & (c ^ d));
                            g = j;
                        }
                        else if(j < 32)
                        {
                            // f = (d & b) | ((~d) & c);
                            f = c ^ (d & (b ^ c));
                            g = (5 * j + 1) % 16;
                        }
                        else if(j < 48)
                        {
                            f = b ^ c ^ d;
                            g = (3 * j + 5) % 16;
                        }
                        else
                        {
                            f = c ^ (b | (~d));
                            g = (7 * j) % 16;
                        }

                        tmp = d;
                        d = c;
                        c = b;

                        // leftrotate
                        x = (a + f + K[j] + blocks[i + g]);
                        y = R[j];
                        b += (x << y) | (x >>> (32 - y));
                        a = tmp;
                    }
                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                }
                return toHexString(h0) + toHexString(h1) + toHexString(h2) + toHexString(h3);
            };

            var toHexString = function(num) {
                var hex = "";
                for(var i = 0; i < 4; i++)
                {
                    var offset = i << 3;
                    hex += HEX_CHARS.charAt((num >> (offset + 4)) & 0x0F) + HEX_CHARS.charAt((num >> offset) & 0x0F);
                }
                return hex;
            };

            var hasUTF8 = function(message) {
                var i = message.length;
                while(i--)
                    if(message.charCodeAt(i) > 127)
                        return true;
                return false;
            };

            var ASCIItoBlocks = function(message) {
                // a block is 32 bits(4 bytes), a chunk is 512 bits(64 bytes)
                var length = message.length;
                var chunkCount = ((length + 8) >> 6) + 1;
                var blockCount = chunkCount << 4; // chunkCount * 16
                var blocks = [];
                var i;
                for(i = 0;i < blockCount;++i)
                    blocks[i] = 0;
                for(i = 0;i < length;++i)
                    blocks[i >> 2] |= message.charCodeAt(i) << ((i % 4) << 3);
                blocks[i >> 2] |= 0x80 << ((i % 4) << 3);
                blocks[blockCount - 2] = length << 3; // length * 8
                return blocks;
            };

            var UTF8toBlocks = function(message) {
                var uri = encodeURIComponent(message);
                var blocks = [];
                for(var i = 0, bytes = 0, length = uri.length;i < length;++i)
                {
                    var c = uri.charCodeAt(i);
                    if(c == 37) // %
                        blocks[bytes >> 2] |= ((HEX_TABLE[uri.charAt(++i)] << 4) | HEX_TABLE[uri.charAt(++i)]) << ((bytes % 4) << 3);
                    else
                        blocks[bytes >> 2] |= c << ((bytes % 4) << 3);
                    ++bytes;
                }
                var chunkCount = ((bytes + 8) >> 6) + 1;
                var blockCount = chunkCount << 4; // chunkCount * 16
                var index = bytes >> 2;
                blocks[index] |= 0x80 << ((bytes % 4) << 3);
                for(var i = index + 1;i < blockCount;++i)
                    blocks[i] = 0;
                blocks[blockCount - 2] = bytes << 3; // bytes * 8
                return blocks;
            };

            return jsmd5;
        })()
    );
})(appEngine);

/**
 * Decorate AppEngine with 'app.utils.factoryJQueryRunnableContainerSet'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.factoryJQueryRunnableContainerSet',
        (function (appEngine, $, undefined) {
            return function () {
                var stack = [];
                function addCallback(fn) {
                    if ( ! typeof fn === 'function') {
                        throw new Error('Invalid param - expecting function');
                    }
                    stack.push(fn);
                }
                function runOver($jqueryCollection) {
                    if ( ! $jqueryCollection instanceof $) {
                        throw new Error('Invalid param - expecting jquery collection');
                    }
                    for (var i = 0, n = stack.length; i < n; i++) {
                        try {
                            stack[i]($jqueryCollection);
                        } catch (e) {
                            // console.log(stack[i]);
                            console.error(e);
                        }
                    }
                }
                return {
                    addCallback: addCallback,
                    runOver: runOver
                };
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.urlThumbToVideoUrl'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.urlThumbToVideoUrl',
        (function (appEngine, $, undefined) {
            return function (src) {
                // console.log('POSTER IN', src);
                var newSrc = src; // src.replace(/%2F/g, '/').replace(/%3A/g, ':');
                // console.log('POSTER OUT', newSrc);
                return newSrc;
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.extractVideoEmbedHtml'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.extractVideoEmbedHtml',
        (function (appEngine, $, undefined) {
            return function ($video, articleCanonicalUrl, index) {
                var id = 'embed-' + appEngine.definitionGet('app.utils.uniqid')();
                var inp = $(
                    [
                        '<input type="text" value="" onclick="this.focus();this.select();" style="cursor: copy; background: #fff;" class="form-control" >',
                    ].join('')
                ).attr({
                    id: id,
                    value: [
                        '<iframe src="' + articleCanonicalUrl + '?video=' + index + '&width=570&height=320" allowfullscreen marginwidth="0" marginheight="0" align="top" scrolling="No" frameborder="0" hspace="0" vspace="0" width="570" height="320" >',
                        '</iframe>'
                    ].join(''),
                    readonly: 'readonly'
                }).wrap('<div></div>').parent().html();
                return [
                    '<div class="video-player-embed">',
                    '<label for="' + id + '">Embed</label>',
                    inp,
                    '</div>'
                ].join('');
            };
        })(appEngine, $)
    );
})(appEngine, $);


(function (appEngine, window, $, undefined) {
    // 'use strict';

    var videoLists = [];
    // window.videoLists = videoLists;

    var videoStopNotMe = function  (videoInstance) {
        var meId = videoInstance.getConfig().id;
        for (var i = 0, n = videoLists.length; i < n; i++) {
            var vidId = videoLists[i].getConfig().id;
            if (meId !== vidId) {
                var state = videoLists[i].getState();
                switch (state) {
                    case 'playing' :
                        // case 'buffering' :
                        videoLists[i].pause();
                        break;
                    default :
                        // no op
                        break;
                }
                // if (state !== 'paused') {
                //     try {
                //         videoLists[i].pause();
                //     } catch (e) {
                //         console.warn('Error while pausing video:', e);
                //     }
                // }
            }
        }
    };

    var videoStopAll = function () {
        for (var i = 0, n = videoLists.length; i < n; i++) {
            var vidId = videoLists[i].getConfig().id;
            var state = videoLists[i].getState();
            switch (state) {
                case 'playing' :
                    // case 'buffering' :
                    videoLists[i].pause();
                    break;
                default :
                    // no op
                    break;
            }
            // if (state !== 'paused') {
            //     try {
            //         videoLists[i].pause();
            //     } catch (e) {
            //         console.warn('Error while pausing video:', e);
            //     }
            // }
        }
    };

    appEngine.definitionSet(
        'app.utils.pauseAllVideos',
        (function (appEngine, $, window, undefined) {

            return function () {
                videoStopAll();
            };

        })(appEngine, $)
    );

    appEngine.definitionSet(
        'app.utils.addVideoToStash',
        (function (appEngine, $, window, undefined)
        {
            return function (videoInstance, gtmArticle)
            {
                videoInstance.__appGtmArticle = gtmArticle;

                videoLists.push(videoInstance);

                if (typeof dataLayer === 'undefined') {
                    return;
                }

                // console.log(videoLists);
                // console.log('adding video', videoInstance.getConfig().id);

                // videoInstance.onPause( function () {
                //     // console.log('pausing video', this.getConfig().id);
                // });

                var eventOnPlay = true;

                let prefix = 'v18';
                window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];

                cX.callQueue.push(['setEventAttributes', { origin: prefix + '-video', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                videoInstance.on('play', function (e) {
                    console.log('playing video', this.getConfig().id);
                    videoStopNotMe(this);

                    const _cx_videoID = String(this.id);
                    if (this.getDuration() !== Infinity) {
                        // video
                        if (playerState !== 'play') {
                            cX.callQueue.push(['sendEvent', 'play', {
                                vid: _cx_videoID,
                                durata: 'determinata',
                                tip_play: 'on_demand'
                            }]);
                            playerState = 'play';
                        }

                        console.log('GTM-Video onPlay ...', this.__appGtmArticle);

                        var isVideoInterviewArticleDesktop = $("#video-interview-desktop-hp").length ? true : false;
                        var isVideoInterviewArticleMobile = $("#video-interview-mobile-hp").length ? true : false;

                        if (isVideoInterviewArticleDesktop || isVideoInterviewArticleMobile) {
                            var parentId = 'videoLiveTrakingArticleInterview';
                        } else {
                            var parentId = $('#' + this.id).parent().prop('id');

                            if (!parentId || !parentId.length) {
                                return;
                            }

                            if (!(parentId === 'videoLiveTrakingArticle' || parentId === 'videoLiveTrakingArticle' || parentId === 'videoLiveTrakingHp' || parentId === 'videoLiveTrakingSidebarHp' || parentId === 'videoArchiveTrakingSidebarHp') || parentId === 'videoLiveTrakingArticleInterview') {
                                return;
                            }
                        }

                        if (parentId === 'videoLiveTrakingSidebarHp') {
                            console.log('videoLiveTrakingSidebarHp =' + ' Click Play_liveSidebarHomepage');
                            var interaction = 'Click Play_liveSidebarHomepage';
                        } else if (parentId === 'videoLiveTrakingArticleInterview') {
                            console.log('videoLiveTrakingArticleInterview =' + ' Click Play_videoInterviewArticle');
                            var interaction = 'Click Play_videoInterviewArticle';
                        } else if (parentId === 'videoArchiveTrakingSidebarHp') {
                            console.log('videoArchiveTrakingSidebarHp =' + ' Click Play_videoArchiveSidebarHomepage');
                            var interaction = 'Click Play_videoArchiveSidebarHomepage';
                        } else if (parentId === 'videoLiveTrakingHp') {
                            var interaction = 'Click Play_videoHomepage';
                        } else if (parentId === 'videoLiveTrakingArticle') {
                            var interaction = 'Click Play_videoArticol';
                        } else if (parentId === 'videoLiveTrakingArticleInterview') {
                            var interaction = 'Click Play_videoArticolInterview';
                        } else {
                            console.log("Invalid video parentId - play - tracking interviews");
                            return;
                            // if (eventOnPlay) {
                            //     var interaction = 'Video started';
                            //     eventOnPlay = false;
                            // } else {
                            //     var interaction = 'Play';
                            // }
                        }

                        dataLayer.push({
                            "event": "interviuri_redactie1", // video
                            "player_id": this.id,
                            "interaction": interaction,
                            "video_url": this.getPlaylistItem().file,
                            "duration": this.getDuration(),
                            "width": this.getWidth(),
                            "height": this.getHeight(),
                            "position": this.getPosition(),
                            "resolutions": [].map.call(this.getQualityLevels(), function (obj) {
                                return obj.label;
                            }),
                            "volume": this.getVolume(),
                            "player_type": this.renderingMode,
                            "window_url": document.location.href,
                            "gtm_container": null // this.__appGtmArticle || {}
                        });
                    }
                });

                let startPosition;
                let sentZero = false;
                let playerState; // to avoid sending play when skipping

                videoInstance.on('pause', function(e)
                {
                    const _cx_videoID = String(this.id);

                    let percentPlayed = Math.floor(this.getPosition()*100/this.getDuration());

                    if (percentPlayed < 50) {
                        interaction = 'Video stopped before half';
                    } else {
                        interaction = 'Video stopped after half';
                    }

                    console.log('GTM-Video onPause ...', this.__appGtmArticle);

                    // Only for static
                    if (this.getDuration() !== Infinity) {

                        let percentPlayed = Math.floor(this.getPosition()*100/this.getDuration());

                        if (percentPlayed < 50) {
                            interaction = 'Video stopped before half';
                        } else {
                            interaction = 'Video stopped after half';
                        }

                        dataLayer.push({
                            "event": "interviuri_redactie1",
                            "player_id": this.id,
                            "interaction": interaction,
                            "video_url": this.getPlaylistItem().file,
                            "duration": this.getDuration(),
                            "width": this.getWidth(),
                            "height": this.getHeight(),
                            "position": this.getPosition(),
                            "resolutions": [].map.call(this.getQualityLevels(), function(obj) {  return obj.label;}),
                            "volume": this.getVolume(),
                            "player_type": this.renderingMode,

                            "window_url": document.location.href,
                            "gtm_container": null // this.__appGtmArticle || {}
                        });

                        cX.callQueue.push(['sendEvent', 'pause', { vid: _cx_videoID, durata: 'determinata', tip_play: 'on_demand' }]);
                        playerState = 'pause';
                    } else {
                        dataLayer.push({
                            "event": "video",
                            "player_id": this.id,
                            "interaction": interaction,
                            "video_url": this.getPlaylistItem().file,
                            "duration": this.getDuration(),
                            "width": this.getWidth(),
                            "height": this.getHeight(),
                            "position": this.getPosition(),
                            "resolutions": [].map.call(this.getQualityLevels(), function(obj) {  return obj.label;}),
                            "volume": this.getVolume(),
                            "player_type": this.renderingMode,

                            "window_url": document.location.href,
                            "gtm_container": null // this.__appGtmArticle || {}
                        });
                    }
                });

                let sentStatus = {
                    0: false,
                    25: false,
                    50: false,
                    75: false,
                    100: false
                };
                let sentMinStatus = {};
                let p = {};
                let continuous = true;
                let playlistComplete = false;
                let previousPosition = 0;
                let totalTimeWatched = 0;
                let min = 0;

                videoInstance.on('time', function(e) {
                    if (sentStatus[0] && sentStatus[25] && sentStatus[50] && sentStatus[75] && sentStatus[100]) {
                        // Reset sentStatus
                        sentStatus = {
                            0: false,
                            25: false,
                            50: false,
                            75: false,
                            100: false
                        };
                        return;
                    }

                    const _cx_videoId = String(this.id);
                    const duration = this.getDuration();
                    const position = this.getPosition();
                    const percentage = Math.floor(position / duration * 100);
                    p[percentage] = true;

                    let condition25, condition50, condition75, condition100;
                    if (duration >= 100) {
                        condition25 = (percentage === 25);
                        condition50 = (percentage === 50);
                        condition75 = (percentage === 75);
                        condition100 = (percentage === 99);
                    } else {
                        // for duration < 100s percetanges are not exact 25, 50, 75, 100
                        let step = Math.floor(100 / duration);

                        // condition25 = (percentage >= 20 && percentage <= 30);
                        condition25 = (25 >= percentage - step && 25 <= percentage + step);
                        condition50 = (50 >= percentage - step && 50 <= percentage + step);
                        condition75 = (75 >= percentage - step && 75 <= percentage + step);
                        condition100 = (100 >= percentage - step && 100 <= percentage + step)
                    }

                    // initialize Cxense DMP Events
                    window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                    cX.callQueue.push(['setEventAttributes',
                        { origin: prefix + '-video', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                    for (let i = 0; i <= percentage; i++) {
                        continuous = continuous && p[i];
                    }

                    if (continuous && percentage === 0 && !sentStatus[0]) {
                        sentStatus[0] = true;
                        // Initializing video and sends start DMP event
                        cX.callQueue.push(['sendEvent', 'progress', { percentage: 0  + '', vid: _cx_videoId, durata: 'determinata', tip_play: 'on_demand' }]);
                    }

                    if (continuous && condition25 && !sentStatus[25]) {
                        sentStatus[25] = true;
                        cX.callQueue.push(['sendEvent', 'progress', { percentage: 25 + '', vid: _cx_videoId, durata: 'determinata', tip_play: 'on_demand' }]);
                    }

                    if (continuous && condition50 && sentStatus[25] && !sentStatus[50]) {
                        sentStatus[50] = true;
                        cX.callQueue.push(['sendEvent', 'progress', { percentage: 50 + '', vid: _cx_videoId, durata: 'determinata', tip_play: 'on_demand' }]);
                    }

                    if (continuous && condition75 && sentStatus[25] && sentStatus[50] && !sentStatus[75]) {
                        sentStatus[75] = true;
                        cX.callQueue.push(['sendEvent', 'progress', { percentage: 75 + '', vid: _cx_videoId, durata: 'determinata', tip_play: 'on_demand' }]);
                    }

                    totalTimeWatched += (position - previousPosition);
                    previousPosition = position;
                    min = Math.floor(totalTimeWatched) / 60;
                    if (min && Number.isInteger(min) && !sentMinStatus[min]) {

                        if (!_cx_videoId || !min) {
                            return;
                        }

                        window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                        cX.callQueue.push(['setEventAttributes', { origin: prefix + '-video', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                        min = String(min);

                        window.cX = window.cX || {};
                        cX.callQueue = cX.callQueue || [];
                        cX.callQueue.push(['sendEvent', 'sendVideoPlayed', { aid: _cx_videoId, time: min }]);

                        sentMinStatus[min] = true;
                    }
                });

                videoInstance.on('seek', function (e) {
                    previousPosition = e.offset;
                });

                videoInstance.on('firstFrame', function () {
                    const _cx_videoId = String(this.id);

                    if (playlistComplete) {
                        cX.callQueue.push(['sendEvent', 'play', { vid: _cx_videoId, durata: 'determinata', tip_play: 'on_demand' }]);
                        playlistComplete = false;
                    }
                });

                videoInstance.on('complete', function(e)
                {
                    console.log('GTM-Video onComplete ...', this.__appGtmArticle);
                    dataLayer.push({
                        "event": "video",
                        "player_id": this.id,
                        "interaction": "Video ended",
                        "video_url": this.getPlaylistItem().file,
                        "duration": this.getDuration(),
                        "width": this.getWidth(),
                        "height": this.getHeight(),
                        "position": this.getPosition(),
                        "resolutions": [].map.call(this.getQualityLevels(), function(obj) {  return obj.label;}),
                        "volume": this.getVolume(),
                        "player_type": this.renderingMode,
                        "window_url": document.location.href,
                        "gtm_container": null // this.__appGtmArticle || {}
                    });

                    const _cx_videoId = String(this.id);

                    if (continuous) {
                        cX.callQueue.push(['sendEvent', 'progress', { percentage: '100', vid: _cx_videoId, durata: 'determinata', tip_play: 'on_demand' }]);
                    }

                    sentStatus = {
                        0: false,
                        25: false,
                        50: false,
                        75: false,
                        100: false
                    };
                    sentMinStatus = {};
                    p = {};
                    continuous = true;
                    playlistComplete = true;
                    previousPosition = 0;
                    // totalTimeWatched = 0;
                });

                videoInstance.on('error', function(e)
                {
                    console.log('GTM-Video onError ...', this.__appGtmArticle);
                    dataLayer.push({
                        "event": "videoError",
                        "player_id": this.id,
                        "interaction": e.message,
                        "video_url": this.getPlaylistItem().file,
                        "duration": this.getDuration(),
                        "width": this.getWidth(),
                        "height": this.getHeight(),
                        "position": this.getPosition(),
                        "resolutions": [].map.call(this.getQualityLevels(), function(obj) {  return obj.label;}),
                        "volume": this.getVolume(),
                        "player_type": this.renderingMode,
                        "window_url": document.location.href,
                        "gtm_container": null // this.__appGtmArticle || {}
                    });
                });

                videoInstance.on('fullscreen', function(e)
                {
                    console.log('GTM-Video onFullscreen ...', this.__appGtmArticle);
                    dataLayer.push({
                        "event": "video",
                        "player_id": this.id,
                        "interaction": "FullScreen " + (e.fullscreen ? "On" : "Off"),
                        "video_url": this.getPlaylistItem().file,
                        "duration": this.getDuration(),
                        "width": this.getWidth(),
                        "height": this.getHeight(),
                        "position": this.getPosition(),
                        "resolutions": [].map.call(this.getQualityLevels(), function(obj) {  return obj.label;}),
                        "volume": this.getVolume(),
                        "player_type": this.renderingMode,

                        "window_url": document.location.href,
                        "gtm_container": null // this.__appGtmArticle || {}
                    });
                });

                videoInstance.on('mute', function(e)
                {
                    dataLayer.push({
                        "event": "video",
                        "player_id": this.id,
                        "interaction": "Mute " + (e.mute ? "On" : "Off"),
                        "video_url": this.getPlaylistItem().file,
                        "duration": this.getDuration(),
                        "width": this.getWidth(),
                        "height": this.getHeight(),
                        "position": this.getPosition(),
                        "resolutions": [].map.call(this.getQualityLevels(), function(obj) {  return obj.label;}),
                        "volume": this.getVolume(),
                        "player_type": this.renderingMode,

                        "window_url": document.location.href,
                        "gtm_container": null // this.__appGtmArticle || {}
                    });
                });

            };

        })(appEngine, $, window)
    );
})(appEngine, window, $);

/**
 * Decorate AppEngine with 'app.utils.videoGetAdvertising'
 *
 * Demo setup:
 * <code>
 <div id="my-video"></div>
 <script type="text/javascript">
 jwplayer("my-video").setup({
 file: "http://content.jwplatform.com/videos/Wf8BfcSt-kNspJqnJ.mp4",
 image: "http://content.jwplatform.com/thumbs/Wf8BfcSt-640.jpg",
 width: "580",
 height: "370",
 primary: "flash",
 advertising: {
 client: "vast",
 schedule: {"myAds":{"offset":"pre","tag":"https://pubads.g.doubleclick.net/gampad/ads?sz=300x168|570x320|466x262&iu=/124748474/Test_Preroll&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&url=http%3A%2F%2Fdevtb.digi24.ro%2Flive%2Fdigi24&description_url=%5Bdescription%5D&correlator=1468867197898"}}
 }
 });
 * </code>
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.videoGetAdvertising',
        (function (appEngine, $, undefined) {
            return function ($article) {

                var $videoPreRoll = $("#videoPreRoll");

                if ($videoPreRoll && $videoPreRoll.length) {

                    console.info("Video preroll code founded in page", $videoPreRoll.html());

                    var videoPreRollJSON = $.parseJSON($videoPreRoll.html());

                    console.log('videoPreRollJSON', videoPreRollJSON);

                    var videoPreRollParams = [];

                    for (preRollParam in videoPreRollJSON.params) {
                        videoPreRollParams.push(preRollParam + "=" + videoPreRollJSON.params[preRollParam]);
                    }

                    if (videoPreRollParams.length > 0) {
                        videoPreRollParams.push("url=" + window.encodeURIComponent(window.location.href));
                        videoPreRollParams.push("description_url=" + window.encodeURIComponent("[description]"));
                        videoPreRollParams.push("correlator="+ (new Date()).getTime());
                    }

                    var videoPreRollCode = videoPreRollJSON.url.toString() + "?" + videoPreRollParams.join("&");

                    if (typeof cX !== 'undefined' && typeof cX.getUserSegmentIds === "function") {

                        cxUserIds = String(cX.getUserSegmentIds({persistedQueryId: "2034d4bf8de8663be6b414ecf7e79bd37f5b1066"}));
                        cxUserIds = '[' + cxUserIds.replace(new RegExp(",", 'g'), '%2C') + ']';

                        videoPreRollCode = videoPreRollCode.replace("##cxUserIds##", cxUserIds);
                    }

                    if ($('script.app-entity-meta-cfg[type="text/template"]').length) {

                        articleCfg = $.parseJSON($('script.app-entity-meta-cfg[type="text/template"]').html());

                        if (articleCfg) {
                            videoPreRollCode = videoPreRollCode.replace("##fullCatPath##", articleCfg.fullCatPath);
                        }
                    } else {
                        videoPreRollCode = videoPreRollCode.replace("##fullCatPath##", "");
                    }

                    //console.log(videoPreRollCode);
                    return {
                        client : "googima",
                        schedule: {
                            "myAdds" : {
                                "offset": "pre",
                                "tag": videoPreRollCode
                            }
                        }
                    };

                } else {
                    console.error("Cannot find #videoPreroll container in page!");
                    return {};
                }

            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appArticleWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appArticleWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);


/**
 * Add registry "appLiveWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appLiveWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);


/**
 * Add registry ""
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appLiveHomepageWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appInterviewHomepageWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appInterviewHomepageWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);


/**
 * Add registry "appArticleEmbedWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appArticleEmbedWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);


/**
 * Add registry "appArticleAnalytics"
 *
 * @NOTE This wrapper of callbacks is deprecated and all callbacks were migrated to another stash
 *
 * @IMPORTANT We keep it only for back-compatibility purposes (for integration with 1616 repositories)
 *
 * @INFO It does nothing since 20.09.2016  (@author Traian.B)
 *
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appArticleAnalytics',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appLiveFormWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appLiveFormWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appForecastWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appForecastWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);


/**
 * Add registry "appShowsFormWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appShowsFormWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/*
* Add registry "appTvStarsFormWidgets"
* */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appTvStarsFormWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

var trackingLivestream = {
    cfg : {
        is: null,  // is|idstream (string) digi24 = 4
        ns: null,   // ns|namestream (string)
        t: null,    // @TODO
        t2: null,   // @TODO
        pe: 'site', // default 'site'
        s: 'site',  // s|src = app|site
        sn: null,   // sn|srcname = ro.rcs-rds.ro.digionline | digi24.ro | digionline.ro
        p: null,    // p|platform = android|ios|winwdos|browser
        pd: null,   // browser.windows | browser.linux | browser.android | browser.ios | browser.mac
        q: null     // q|quality
    },

    setConfigItem: function (property, value) {
        if (property in this.cfg) {
            this.cfg[property] = value;
        } else {
            console.error("Trying to set a property that doesnt exists <" + property + ">");
        }
        return this;
    },

    setConfigItems: function (cfg) {
        for (key in cfg) {
            this.setConfigItem(key, cfg[key]);
        }
        return this;

    },

    getPlatformDetails: function()
    {
        var platform = null;
        if (navigator.appVersion.indexOf("Win") != -1) {
            platform = "windows";
        } else if (navigator.appVersion.indexOf("X11") != -1) {
            platform = "linux";
        } else if (navigator.appVersion.indexOf("Linux") != -1) {
            platform = "linux";
        } else if (navigator.userAgent.indexOf("Android") != -1) {
            platform = "android";
        } else if (navigator.userAgent.indexOf("like Mac") != -1) {
            platform = "ios";
        } else if (navigator.appVersion.indexOf("Mac") != -1) {
            platform = "mac";
        }

        if (platform) {
            this.setConfigItem('pd', platform);
        }
    },

    getQueryString: function()
    {
        var out = new Array();

        for (key in this.cfg) {
            if (this.cfg[key]) {
                out.push(key + '=' + encodeURIComponent(this.cfg[key]));
            }
        }

        var qs = out.join('&');
        console.info("qs: "+ qs);
        return qs;
    },

    init: function(cfg) {
        if (cfg) {
            this.setConfigItems(cfg)
        }

        this.getPlatformDetails();

        return this;
    },
}
trackingLivestream.init({
    'is': 4,
    'ns':'digi24',
    'p':'browser',
    'sn': 'digi24.ro',
});


/**
 * Decorate AppEngine with 'app.utils.initVideoInContainer'
 *
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initVideoInContainer',
        (function (appEngine, $, undefined) {
            return function ($articleJqColl) {

                appEngine.definitionGet('app.utils.pauseAllVideos')();

                if ( ! $articleJqColl instanceof $) {
                    throw new Error('Invalid param - expecting jquery collection');
                }
                var videoIndexInArticle = -1;

                if (! $articleJqColl.length) {
                    $articleJqColl = $(".article-story");
                }
                $articleJqColl.find('.video').each( function (index, elem) {
                    var $video = $(this);
                    if ($video.attr('video-init')) {
                        return;
                    }

                    $video.attr('video-init', true);

                    var gtmVideoArticle = null;
                    try {
                        // @NOTE We can have ".data-app-meta-article" OR ".data-app-meta-video-article" container !!
                        gtmVideoArticle = $.parseJSON($.trim(
                            $video.closest('.data-app-meta')
                                .find('script.app-entity-gtm-cfg[type="text/template"]')
                                .html()
                        ));
                    } catch (e) {
                        console.warn('Video article gtm warn', e);
                    }
                    // console.log('Gtm Video Parent Article', gtmVideoArticle);

                    try {
                        var jsonCfg = $.parseJSON($.trim($video.find('script[type="text/template"]').first().html()));

                        let canAllowTrackingCode = false;
                        if (window.appCfg.gdprConsent && window.appCfg.gdprConsent.canAllowTrackingCode) {
                            canAllowTrackingCode = window.appCfg.gdprConsent.canAllowTrackingCode;
                        }

                        if (typeof jsonCfg !== 'object') {
                            throw new Error('Invalid video cfg');
                        }
                        if ( ! jsonCfg["shortcode"]) {
                            throw new Error('Invalid shortcode cfg new-info');
                        }

                        // preroll for all devices except iPod, iPad or iPhone
                        if (jsonCfg['shortcode'] === 'livestreamDai' && ! navigator.userAgent.match(/(iPod|iPhone|iPad)/)) {
                            jsonCfg['shortcode'] = 'livestreamDaiPreroll';
                        }

                        //console.log('jsonCfg["shortcode"]=', jsonCfg["shortcode"]);

                        switch (jsonCfg["shortcode"]) {
                            case 'livestream':

                                if (! jsonCfg["new-info"]) {
                                    throw new Error('Invalid livestream cfg new-info');
                                }
                                if (! jsonCfg["new-info"]["meta"]) {
                                    throw new Error('Invalid livestream cfg new-info meta');
                                }
                                if (! jsonCfg["new-info"]["meta"]["scope"]) {
                                    throw new Error('Invalid livestream cfg new-info meta message or scope or start or stop');
                                }

                            function isIosPlatform()
                            {
                                return (
                                    navigator.userAgent.match(/(iPod|iPhone|iPad)/)
                                    || /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
                                );
                            }

                                var isIos = isIosPlatform();

                                var image     = jsonCfg["new-info"]["meta"]["image"];
                                var title     = jsonCfg["new-info"]["meta"]["title"] || 'Digi24 Live';
                                var autostart = jsonCfg["new-info"]["meta"]["autostart"];
                                var preload   = jsonCfg["new-info"]["meta"]["preload"] || 'auto';
                                var scope     = jsonCfg["new-info"]["meta"]["scope"];
                                var mute      = jsonCfg["new-info"]["meta"]["mute"] || false;
                                var start     = (jsonCfg["new-info"]["meta"]["start"] || 0) * 1000;
                                var stop      = (jsonCfg["new-info"]["meta"]["stop"]  || 0) * 1000;
                                var message   = jsonCfg["new-info"]["meta"]["message"] || 'No info';

                                if (scope == "event" && isIos) {
                                    scope = "event21";
                                }

                                var displayLive  = true;

                                if (start > 0 && stop > 0) {
                                    displayLive = false;
                                    var dtStartClient = (new Date()).getTime();
                                    if (start < dtStartClient && stop > dtStartClient) {
                                        displayLive = true;
                                    }
                                }
                                if (! displayLive) {
                                    // $video.html(message);
                                    return;
                                }

                                if (typeof autostart == "undefined") {
                                    autostart = 'viewable';
                                }

                                var trackingParam = '';
                                if (trackingLivestream) {
                                    trackingParam = trackingLivestream.getQueryString().toString();
                                }

                                var jqXhr = $.get('//balancer2.digi24.ro/streamer/make_key.php');
                                (function (jqXhr, scope, start, stop, message, $video) {
                                    jqXhr.done(function (rsp) {
                                        $.when(
                                            $.get([
                                                '//balancer2.digi24.ro/streamer.php?',
                                                '&scope=', window.encodeURIComponent(scope),
                                                '&key=', window.encodeURIComponent(rsp),
                                                '&outputFormat=', window.encodeURIComponent('json'),
                                                '&type=', window.encodeURIComponent('abr'),
                                                '&quality=', window.encodeURIComponent('hq'),
                                                '&'+ trackingParam
                                            ].join(''))
                                        ).always(function(response) {

                                            if (! response || ! response.file || ! response.type) {
                                                console.error("Invalid balancer response");
                                                return;
                                            }

                                            var hqCfg = response;

                                            var sources = [];
                                            if (hqCfg.file) {
                                                sources.push({
                                                    file: hqCfg.file,
                                                    "default": "true",
                                                    label: "HQ"
                                                });
                                            }

                                            if (sources.length == 0) {
                                                return;
                                            }

                                            var newSource = sources[0]['file'];
                                            var id = null;
                                            if (! $video.attr('id')) {
                                                id = 'video-' + appEngine.definitionGet('app.utils.uniqid')();
                                                $video.attr('id', id);
                                            } else {
                                                id = $video.attr('id');
                                            }

                                            var player = jwplayer(id);

                                            var videoCfg = {
                                                file: newSource,
                                                width: "100%",
                                                aspectratio: "16:9",
                                                autostart: autostart,
                                                mute: mute,
                                                stretching: 'uniform',
                                                preload: 'auto',
                                                controls: 'true',
                                                primary: 'html5',
                                                cast: {},
                                                title: title,
                                                bufferlength: '5',
                                                skin: {name: 'seven'},
                                                smoothing: 'true',
                                                deblocking: 'true',
                                                pipIcon: 'disabled'
                                            }

                                            // if the stream is dash
                                            if (response.type == "drm") {
                                                videoCfg.dash = true;
                                            }

                                            if (image) {
                                                videoCfg.image = image;
                                            }

                                            var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();

                                            if (! $.isEmptyObject(advertising)) {
                                                videoCfg.advertising = advertising;
                                            }

                                            console.log("config player livestream", videoCfg, "");

                                            player.setup(videoCfg);

                                            if (canAllowTrackingCode) {
                                                window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                                                cX.callQueue.push(['setEventAttributes', { origin: 'v18-video', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                                                const _cx_videoID = String(id);
                                                let startPosition = 0;
                                                let sentZero = false;

                                                player.on('play', function(e) {
                                                    startPosition = Math.floor(this.getPosition());
                                                    cX.callQueue.push(['sendEvent', 'play', { vid: _cx_videoID, durata: 'nedeterminata', tip_play: 'on_demand' }]);

                                                    if (! sentZero) {
                                                        cX.callQueue.push(['sendEvent', 'sendLiveOffsetPercentage', { vid: _cx_videoID, percentage: '0', durata: 'nedeterminata', tip_play: 'on_demand'}]);
                                                        sentZero = true;
                                                    }
                                                });

                                                let wasPaused = false;
                                                player.on('pause', function() {
                                                    cX.callQueue.push(['sendEvent', 'pause', { vid: _cx_videoID, durata: 'nedeterminata', tip_play: 'on_demand' }]);
                                                    wasPaused = true;
                                                });

                                                let sentMinStatus = {};
                                                player.on('time', function(e) {
                                                    let currentPosition = 0;
                                                    let min = 0;

                                                    if (this.getDuration() === Infinity) {
                                                        currentPosition = Math.floor(this.getPosition());

                                                        if (startPosition === 0) {
                                                            startPosition = currentPosition;
                                                        }

                                                        min = (currentPosition - startPosition) / 60;
                                                        if (min && Number.isInteger(min) && !sentMinStatus[min]) {
                                                            if (!this.id || !min) {
                                                                return;
                                                            }

                                                            min = String(min);
                                                            cX.callQueue.push(['sendEvent', 'sendVideoPlayed', { vid: String(this.id), time: min }]);

                                                            sentMinStatus[min] = true;
                                                        }
                                                        wasPaused = false;
                                                    }
                                                });

                                                // appEngine.definitionGet('app.utils.addVideoToStash')(player, gtmVideoArticle);
                                            }
                                        });
                                    });
                                })(jqXhr, scope, start, stop, message, $video);

                                break;
                            case 'livestreamDai':

                                console.log("Livestream DAI: jwplayer + ima + hls");

                                // remove preroll placeholders
                                document.getElementById('adContainer').remove();
                                document.getElementById('playpause').remove();
                                document.getElementById('fullscreen').remove();

                                if (! jsonCfg["new-info"]) {
                                    throw new Error('Invalid livestream cfg new-info');
                                }
                                if (! jsonCfg["new-info"]["meta"]) {
                                    throw new Error('Invalid livestream cfg new-info meta');
                                }
                                if (! jsonCfg["new-info"]["meta"]["scope"]) {
                                    throw new Error('Invalid livestream cfg new-info meta message or scope or start or stop');
                                }

                                var image     = jsonCfg["new-info"]["meta"]["image"];
                                var title     = jsonCfg["new-info"]["meta"]["title"] || 'Digi24 Live';
                                var autostart = jsonCfg["new-info"]["meta"]["autostart"];
                                var preload   = jsonCfg["new-info"]["meta"]["preload"] || 'auto';
                                var scope     = jsonCfg["new-info"]["meta"]["scope"];
                                var message   = jsonCfg["new-info"]["meta"]["message"] || 'No info';

                                if (typeof autostart == "undefined") {
                                    //autostart = 'viewable';
                                    autostart = 'false';
                                }

                                console.log("autostart: " + autostart);

                                var id = null;
                                if (! $video.attr('id')) {
                                    id = 'video-' + appEngine.definitionGet('app.utils.uniqid')();
                                    $video.attr('id', id);
                                } else {
                                    id = $video.attr('id');
                                }

                                var trackingParam = '';
                                if (trackingLivestream) {
                                    trackingParam = trackingLivestream.getQueryString().toString();
                                }

                                var hls = new Hls(); // hls.js video player

                                var videoElement;
                                var adUiElement;
                                var isAdBreak;

                                var BACKUP_STREAM = "https://pubads.g.doubleclick.net/ssai/event/OQfdjUhHSDSlb1fJVzehsQ/master.m3u8";

                                var videoCfg = {
                                    // file: BACKUP_STREAM,
                                    'playlist': [
                                        {
                                            "file": BACKUP_STREAM,
                                            "daiSetting": {
                                                "assetKey": "OQfdjUhHSDSlb1fJVzehsQ"
                                            }
                                        }
                                    ],
                                    'advertising': {
                                        'client': 'dai'
                                    },
                                    width: "100%",
                                    aspectratio: "16:9",
                                    autostart: autostart,
                                    mute: 'false',
                                    stretching: 'uniform',
                                    controls: 'true',
                                    primary: 'html5',
                                    cast: {},
                                    title: title,
                                    bufferlength: '5',
                                    skin: {name: 'seven'},
                                    smoothing: 'true',
                                    deblocking: 'true',
                                    preload: preload,
                                    pipIcon: 'disabled'
                                }

                                //var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                // if (! $.isEmptyObject(advertising)) {
                                //     videoCfg.advertising = advertising;
                                // }

                                var player = jwplayer(id);
                                player.setup(videoCfg);

                                console.log("config player", videoCfg, "", player);

                                jwplayer().on('error', function(e)
                                {
                                    if (e.code == 232011) {
                                        $("#"+id).html('<img src="/static/img/adblock.jpg">');
                                    }
                                });

                                // Turn off controls until stream finishes loading.
                                jwplayer().setControls(true);
                                player.on('ready', function(e)
                                {
                                    // jwplayer().setControls(true);
                                    initStreamManager();
                                    requestLiveStream('OQfdjUhHSDSlb1fJVzehsQ','');
                                });

                                jwplayer().on('play', function(e)
                                {
                                    console.log("ONPLAY");
                                    trackingXhr = $.get('https://balancer2.digi24.ro/tracking.html?'+ trackingParam);
                                })

                            function initStreamManager()
                            {
                                var videoElement = jwplayer().getContainer().querySelector('video');
                                //console.log(videoElement);

                                streamManager = new google.ima.dai.api.StreamManager(videoElement);
                                streamManager.addEventListener(
                                    [
                                        google.ima.dai.api.StreamEvent.Type.LOADED,
                                        google.ima.dai.api.StreamEvent.Type.ERROR,
                                        google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED,
                                        google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED
                                    ],
                                    onStreamEvent,
                                    false
                                );

                                // Add metadata listener. Only used in live streams.
                                jwplayer().on('meta', function(e)
                                {
                                    //console.log('jwplayer on meta');
                                    if (streamManager && e.metadata) {
                                        streamManager.onTimedMetadata(e.metadata);
                                    }
                                });
                            }

                            function requestLiveStream(assetKey, apiKey)
                            {
                                console.log("", "requestLiveStream","", "");
                                var streamRequest = new google.ima.dai.api.LiveStreamRequest();
                                streamRequest.assetKey = assetKey;
                                streamRequest.apiKey = apiKey || '';
                                streamManager.requestStream(streamRequest);
                            }

                            function onStreamEvent(e)
                            {
                                console.log('onStreamEvent', e );
                                //e.type = google.ima.dai.api.StreamEvent.Type.ERROR;
                                switch (e.type) {
                                    case google.ima.dai.api.StreamEvent.Type.LOADED:
                                        console.log("loadStream", e.getStreamData(), "");
                                        loadStream(e.getStreamData());
                                        break;
                                    case google.ima.dai.api.StreamEvent.Type.ERROR:
                                        console.log('Error loading stream, playing backup stream.');
                                        jwplayer().load([{'file': BACKUP_STREAM}]);
                                        jwplayer().play();
                                        break;
                                    case google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED:
                                        console.log('Ad Break Started');
                                        isAdBreak = true;
                                        // jwplayer().setControls(false);
                                        videoElement.controls = false;
                                        clickElement.style.display = 'block';
                                        break;
                                    case google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED:
                                        console.log('Ad Break Ended');
                                        isAdBreak = false;
                                        //jwplayer().setControls(true);
                                        videoElement.controls = true;
                                        clickElement.style.display = 'none';
                                        break;
                                    default:
                                        break;
                                }
                            }

                            function loadStream(data)
                            {
                                var url = data['url'];
                                console.log('load stream :' + url);

                                // jwplayer().setControls(true);
                                // jwplayer().load([{'file': url}]);
                                // jwplayer().setControls(true);
                                // jwplayer().play();

                                hls.loadSource(url);
                                hls.attachMedia(videoElement);
                                hls.on(Hls.Events.MANIFEST_PARSED, function() {
                                    console.log('Video Play');
                                    console.log("videoElement", videoElement);
                                    videoElement.play();
                                });
                            }

                            function onStreamPause()
                            {
                                console.log('onStreamPause');
                                if (isAdBreak) {
                                    videoElement.controls = true;
                                    adUiElement.style.display = 'none';
                                }
                            }

                            function onStreamPlay()
                            {
                                console.log('onStreamPlay');
                                if (isAdBreak) {
                                    videoElement.controls = false;
                                    adUiElement.style.display = 'block';
                                }
                            }

                                //appEngine.definitionGet('app.utils.addVideoToStash')(player, gtmVideoArticle);

                                break;

                            case 'livestreamDaiPreroll':
                                console.clear();
                                console.log("", "", "Livestream DAI: jwplayer + ima + hls + preroll");

                                function detectIosPlatform()
                                {
                                    return (
                                        navigator.userAgent.match(/(iPod|iPhone|iPad)/)
                                        || /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
                                    );
                                }

                                if (! jsonCfg["new-info"]) {
                                    throw new Error('Invalid livestream cfg new-info');
                                }
                                if (! jsonCfg["new-info"]["meta"]) {
                                    throw new Error('Invalid livestream cfg new-info meta');
                                }
                                if (! jsonCfg["new-info"]["meta"]["scope"]) {
                                    throw new Error('Invalid livestream cfg new-info meta message or scope or start or stop');
                                }

                                var image     = jsonCfg["new-info"]["meta"]["image"];
                                var title     = jsonCfg["new-info"]["meta"]["title"] || 'Digi24 Live';
                                var autostart = jsonCfg["new-info"]["meta"]["autostart"];
                                var preload   = jsonCfg["new-info"]["meta"]["preload"] || 'auto';
                                var scope     = jsonCfg["new-info"]["meta"]["scope"];
                                var message   = jsonCfg["new-info"]["meta"]["message"] || 'No info';

                                if (typeof autostart == "undefined") {
                                    //autostart = 'viewable';
                                    autostart = 'false';
                                }

                                console.log("autostart: " + autostart);

                                var id = null;
                                if (! $video.attr('id')) {
                                    id = 'video-' + appEngine.definitionGet('app.utils.uniqid')();
                                    $video.attr('id', id);
                                } else {
                                    id = $video.attr('id');
                                }

                                // StreamManager which will be used to request ad-enabled streams.
                                var streamManager;

                                // Used for playback of the preroll ad using the client side SDK.
                                var adsLoader;
                                var adDisplayContainer;
                                var adsManager;

                                // hls.js video player
                                var hls = new Hls();

                                // Video element
                                var videoElement;

                                // Ad UI element
                                var adUiElement;

                                // Whether the stream is currently in an ad break.
                                var isAdBreak;

                                var isIosPlatformV2 = detectIosPlatform();

                                console.log("isIosPlatformV2", isIosPlatformV2);

                                if (isIosPlatformV2) {
                                    var BACKUP_STREAM = "https://pubads.g.doubleclick.net/ssai/event/CQxfnDL5RaygeHR8svZeDg/master.m3u8";
                                } else {
                                    var BACKUP_STREAM = "https://dai.google.com/linear/dash/event/0zJOVqk1S1azvAB6zbx2oQ/manifest.mpd";
                                }

                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if ($.isEmptyObject(advertising)) {
                                    // default preroll ad tag
                                    var TEST_AD_TAG = "https://pubads.g.doubleclick.net/gampad/live/ads?iu=/124748474/preroll-live-digi24-new&env=vp&impl=s&tcfd=0&npa=0&gdfp_req=1&output=vast&sz=570x320|640x480&cust_params=Categorii-Digi24%3D/live/digi24%26CxSegments%3D[8kc8greqq334%2C8kc8greqq345%2C8kc8greqq349%2C8kc8x39uwg34%2C8kc93scpywix%2C8kc93scpywiy%2C8kc93scpywiz%2C8kc9t0gt24mm%2C8knb6wjl3qfv%2C8knbekpwpxf8%2C8knbekpwpxfd%2C8knbk97398el%2C8knbu7lue7v0%2C8knbu7lue7v3%2C8knc1t1dcjrm%2C8knc1t1dcjrp%2C8knc7cl7655y%2C8kyfavv9rbj3%2C8ljv4rhvgmj4%2C8ljv4rhvgmj6%2C8ljwtdoxgixv%2C8m5t5aw49de2%2C8m5vdtc2nkqy%2C8mgu3ngxkxxj%2C8mgu3ngxkxxm%2C8mgu3ngxkxxq%2C8mgu3ngxkxxv%2C8mgu3ngxkxxw%2C8mgu3ngxkxy8%2C8mh63zgpov42%2C8mhbsxw4ksky%2C8mhezmuuucqg%2C8mhezmuuucqq%2C8mhezmuuucqs%2C8mhezmuuucqt%2C8mhezmuuucqu%2C8mhv2u539opn%2C8mrx7bf605zl%2C8mrx7bf605zu%2C8msenlj5uy8l%2C8msi366nsu3r%2C8msi366nsu3t%2C8msi366nsu3u%2C8msi366nsu3y%2C8n30aupec73v%2C8n30aupec73z%2C8n30aupec740%2C8n30aupec741%2C8n30aupec74j%2C8n30aupec74p%2C8n3hr6qrdfhj%2C8n3l6pe9ho9x%2C8n3l6pe9hoa1%2C8n3l6pe9hoa4%2C8n3qsg3gb9sa%2C8ne3e9aseyjs%2C8ne3e9aseyjx%2C8ne3e9aseyk2%2C8ne3e9aseykf%2C8ne3e9aseykh%2C8ne3e9aseykk%2C8ne3e9aseyko%2C8ne3e9aseykq%2C8ne3e9aseykr%2C8ne3e9aseykv%2C8ne3e9aseyl1%2C8ne3e9aseyl4%2C8ne3e9aseyl6%2C8neoa8n9ll18%2C8neoa8n9ll19%2C8neoa8n9ll1a%2C8neoa8n9ll1c%2C8neoa8n9ll1g%2C8neoa8n9ll1j%2C8neuye6ywc02%2C8nf0om0dhhq1%2C8nf4aq5yc1zd%2C8nq3s40qsloq%2C8o0991xmmspl%2C8o16vnddv27l]&unviewed_position_start=1&url=https%3A%2F%2Fdevabm.digi24.ro%2Flive%2Fdigi24&description_url=%5Bdescription%5D&correlator=1618316697119";
                                } else {
                                    var TEST_AD_TAG = advertising.schedule.myAdds.tag; // preroll ad tag from #videoPreroll
                                }

                                if (isIosPlatformV2) {
                                    var videoCfg = {
                                        // file: BACKUP_STREAM,
                                        'playlist': [
                                            {
                                                "file": BACKUP_STREAM,
                                                "daiSetting": {
                                                    "assetKey": "CQxfnDL5RaygeHR8svZeDg"
                                                }
                                            }
                                        ],
                                        'advertising': {
                                            'client': 'dai'
                                        },
                                        width: "100%",
                                        aspectratio: "16:9",
                                        autostart: false,
                                        mute: 'false',
                                        stretching: 'uniform',
                                        controls: 'true',
                                        primary: 'html5',
                                        cast: {},
                                        title: title,
                                        bufferlength: '5',
                                        skin: {name: 'seven'},
                                        smoothing: 'true',
                                        deblocking: 'true',
                                        preload: preload,
                                        pipIcon: 'disabled'
                                    };
                                } else {
                                    var videoCfg = {
                                        // file: BACKUP_STREAM,
                                        'playlist': [
                                            {
                                                "file": BACKUP_STREAM,
                                                "daiSetting": {
                                                    "assetKey": "0zJOVqk1S1azvAB6zbx2oQ"
                                                },
                                                "type": "dash",
                                            }
                                        ],
                                        'advertising': {
                                            'client': 'dai'
                                        },
                                        width: "100%",
                                        aspectratio: "16:9",
                                        autostart: false,
                                        mute: 'false',
                                        stretching: 'uniform',
                                        controls: 'true',
                                        primary: 'html5',
                                        cast: {},
                                        title: title,
                                        bufferlength: '5',
                                        skin: {name: 'seven'},
                                        smoothing: 'true',
                                        deblocking: 'true',
                                        preload: preload,
                                        pipIcon: 'disabled'
                                    };
                                }

                                /**
                                 * @see https://github.com/googleads/googleads-ima-html5/blob/master/advanced/index.html
                                 */
                                var player = jwplayer(id);
                                player.setup(videoCfg);

                                let jwPlayerVolume = player.getVolume() || null;

                                if (jwPlayerVolume) {
                                    if (jwPlayerVolume > 0) {
                                        videoCfg.volume = jwPlayerVolume;
                                    }
                                }

                                console.log("config player", videoCfg, "", player);

                                if (canAllowTrackingCode) {
                                    window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                                    cX.callQueue.push(['setEventAttributes', { origin: 'v18-video', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                                    const _cx_videoID = String(id);
                                    let startPosition = 0;
                                    let sentZero = false;

                                    player.on('play', function(e) {
                                        startPosition = Math.floor(this.getPosition());
                                        cX.callQueue.push(['sendEvent', 'play', { vid: _cx_videoID, durata: 'nedeterminata', tip_play: 'on_demand' }]);

                                        if (! sentZero) {
                                            cX.callQueue.push(['sendEvent', 'sendLiveOffsetPercentage', { vid: _cx_videoID, percentage: '0', durata: 'nedeterminata', tip_play: 'on_demand'}]);
                                            sentZero = true;
                                        }
                                    });

                                    let wasPaused = false;
                                    player.on('pause', function() {
                                        cX.callQueue.push(['sendEvent', 'pause', { vid: _cx_videoID, durata: 'nedeterminata', tip_play: 'on_demand' }]);
                                        wasPaused = true;
                                    });

                                    let sentMinStatus = {};
                                    player.on('time', function(e) {
                                        let currentPosition = 0;
                                        let min = 0;

                                        if (this.getDuration() === Infinity) {
                                            currentPosition = Math.floor(this.getPosition());

                                            if (startPosition === 0) {
                                                startPosition = currentPosition;
                                            }

                                            min = (currentPosition - startPosition) / 60;
                                            if (min && Number.isInteger(min) && !sentMinStatus[min]) {
                                                if (!this.id || !min) {
                                                    return;
                                                }

                                                min = String(min);
                                                cX.callQueue.push(['sendEvent', 'sendVideoPlayed', { vid: String(this.id), time: min }]);

                                                sentMinStatus[min] = true;
                                            }
                                            wasPaused = false;
                                        }
                                    });
                                }

                                jwplayer().on('error', function(e) //adblocker image
                                {
                                    if (e.code == 232011) {
                                        $("#"+id).html('<img src="/static/img/adblock.jpg">');
                                    }
                                });

                                if (typeof  google == "undefined") {
                                    $("#adContainer").html('<img src="/static/img/adblock.jpg">');
                                    return;
                                }

                                // Turn off controls until stream finishes loading.
                                var isMobile = isMobilePlatform();

                                if (isMobile)
                                {
                                    jwplayer().setControls(true);
                                    window.addEventListener('touchstart', function() {
                                        initAllVideoContent();
                                    });
                                    window.addEventListener('scroll', function() {
                                        initAllVideoContent();
                                    });
                                } else {
                                    jwplayer().setControls(true);
                                    jwplayer().on('ready', function(e)
                                    {
                                        // jwplayer().setControls(true);
                                        window.addEventListener('click', function() {
                                            initAllVideoContent();
                                        });
                                        //initStreamManagerPreroll();
                                        //requestLiveStream('OQfdjUhHSDSlb1fJVzehsQ','');
                                    });
                                }

                                var init = 0;
                            function initAllVideoContent()
                            {
                                if (init > 0) {
                                    console.log("init already triggered", init);
                                    return;
                                }
                                initStreamManagerPreroll();
                                init++
                            }

                                // play-pause, fullscreen elements
                                var playButton = document.getElementById('playpause');
                                //var fullscreenButton = document.getElementById('fullscreen');

                                playButton.addEventListener('click', playButtonOnClick, false);
                                //fullscreenButton.addEventListener('click', fullscreenButtonOnClick, false);

                                var fullscreen = false;
                                var playing = false;

                                var livestreamWidth  = parseInt(document.getElementById('video-player-live').offsetWidth);
                                var livestreamHeight = parseInt(livestreamWidth*(9/16));

                                prerollContainer = document.getElementById('adContainer');

                                prerollContainer.style.width = livestreamWidth;
                                prerollContainer.style.height = livestreamHeight + 20;

                                console.log("set preroll container to "+ livestreamWidth + " x " + livestreamHeight);

                            function playButtonOnClick()
                            {
                                console.log('play button on click');
                                console.log("update Chrome din playButtonOnClick");
                                updatePlayButton();
                            }

                            function isMobilePlatform()
                            {
                                return (
                                    navigator.userAgent.match(/(iPod|iPhone|iPad)/)
                                    || navigator.userAgent.toLowerCase().indexOf('android') > -1
                                );
                            }

                            function fullscreenButtonOnClick()
                            {
                                console.log('fullscreen button on click');
                                if (fullscreen) {
                                    // The video is currently in fullscreen mode
                                    var cancelFullscreen = document.exitFullscreen || document.exitFullScreen ||
                                        document.webkitCancelFullScreen || document.mozCancelFullScreen;
                                    if (cancelFullscreen) {
                                        cancelFullscreen.call(document);
                                    } else {
                                        onFullscreenChange();
                                    }
                                } else {
                                    // Try to enter fullscreen mode in the browser
                                    var requestFullscreen = document.documentElement.requestFullscreen ||
                                        document.documentElement.webkitRequestFullscreen ||
                                        document.documentElement.mozRequestFullscreen ||
                                        document.documentElement.requestFullScreen ||
                                        document.documentElement.webkitRequestFullScreen ||
                                        document.documentElement.mozRequestFullScreen;

                                    if (requestFullscreen) {
                                        console.log("","requestFullscreen",requestFullscreen,"");
                                        fullscreenWidth = window.screen.width;
                                        fullscreenHeight = window.screen.height;
                                        requestFullscreen.call(document.documentElement);
                                    } else {
                                        fullscreenWidth = window.innerWidth;
                                        fullscreenHeight = window.innerHeight;
                                        onFullscreenChange();
                                    }

                                    requestFullscreen.call(document.documentElement);
                                }
                            }

                            function prerollPlayerResize(position, top, left, width, height)
                            {
                                prerollContainer.style.position = position;
                                prerollContainer.style.top  = top +'px';
                                prerollContainer.style.left = left +'px';
                                prerollContainer.style.width = width +'px';
                                prerollContainer.style.height = height +'px';
                            }

                            function onFullscreenChange()
                            {
                                console.log("onFullscreenChange");

                                if (fullscreen) {
                                    // The user just exited fullscreen
                                    // Resize the ad container
                                    //  adsManager.resize(this.videoPlayer_.width, this.videoPlayer_.height);
                                    // Return the video to its original size and position

                                    //this.videoPlayer_.resize('relative', '', '', 600, this.videoPlayer_.height);

                                    prerollPlayerResize('relative', 0, 0, 400, 400);
                                    fullscreen = false;
                                } else {
                                    // The fullscreen button was just clicked
                                    // Resize the ad container
                                    // this.makeAdsFullscreen_();
                                    // Make the video take up the entire screen
                                    prerollPlayerResize('absolute', 0, 0, fullscreenWidth, fullscreenHeight);
                                    fullscreen = true;
                                }
                            }

                            function updatePlayButton()
                            {
                                //console.log("playing", playing, adsManager);
                                if (playing === true) {

                                    console.log("dau pauza la adManager");
                                    console.log("playButton devine vizibil");
                                    console.log("playButton= PLAY");

                                    adsManager.pause();
                                    showPlayButton();
                                    playButton.textContent = String.fromCharCode(9654);
                                    playing = false

                                } else {
                                    // playing = true;
                                    console.log("dau resume la adManager");
                                    console.log("playButton= PAUZA II");
                                    adsManager.resume();

                                    playButton.textContent = 'II';
                                    playing = true
                                }
                            }

                            function initStreamManagerPreroll()
                            {
                                var videoElement = jwplayer().getContainer().querySelector('video');
                                var adUiElement = document.getElementById('adUi');
                                //console.log(videoElement);

                                streamManager = new google.ima.dai.api.StreamManager(videoElement, adUiElement);
                                streamManager.addEventListener(
                                    [
                                        google.ima.dai.api.StreamEvent.Type.LOADED,
                                        google.ima.dai.api.StreamEvent.Type.ERROR,
                                        google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED,
                                        google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED
                                    ],
                                    onStreamEvent,
                                    false
                                );

                                // client side ads setup.
                                adDisplayContainer = new google.ima.AdDisplayContainer(
                                    document.getElementById('adContainer'),
                                    videoElement
                                );

                                // Must be done as the result of a user action on mobile
                                adDisplayContainer.initialize();
                                adsLoader = new google.ima.AdsLoader(adDisplayContainer);
                                adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, onAdsManagerLoaded, false);
                                adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, prerollOnAdError, false);

                                // Add metadata listener. Only used in live streams.
                                jwplayer().on('meta', function(e)
                                {
                                    console.log('jwplayer on meta');
                                    if (streamManager && e.metadata) {
                                        streamManager.onTimedMetadata(e.metadata);
                                    }
                                });

                                requestPreroll(TEST_AD_TAG);
                            }

                            /**
                             * Handles the adsManagerLoaded event (client side ads).
                             * @param  {AdsManagerLoadedEvent} adsManagerLoadedEvent
                             */
                            function onAdsManagerLoaded(adsManagerLoadedEvent)
                            {
                                adsManager = adsManagerLoadedEvent.getAdsManager(videoElement);

                                var adUiElement = document.getElementById('adUi');
                                adUiElement.style.display = 'block';
                                playing = true;
                                adsManager.addEventListener(google.ima.AdEvent.Type.CLICK, function() {
                                    if (playing === true) {
                                        console.log("dau pauza la adManager");
                                        console.log("playButton devine vizibil");
                                        console.log("playButton= PLAY");

                                        adsManager.pause();
                                        showPlayButton();
                                        playButton.textContent = String.fromCharCode(9654);
                                        playing = false
                                    }
                                });

                                adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, prerollOnAdError);

                                adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, function(e) {
                                    console.log('Content pause requested..');
                                    // player.stop();
                                });

                                adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, onAdEvent);
                                adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, onAdEvent);

                                adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, function(e)
                                {
                                    console.log('Content resume requested.');
                                    adUiElement.style.display = 'none';

                                    if (isIosPlatformV2) {
                                        requestLiveStream('CQxfnDL5RaygeHR8svZeDg', '');
                                    } else {
                                        requestLiveStream('0zJOVqk1S1azvAB6zbx2oQ', '');
                                    }
                                    playLivestream();
                                });

                                try {
                                    adsManager.init(livestreamWidth, livestreamHeight, google.ima.ViewMode.NORMAL);

                                    /**
                                     * Sincronise videojs volume with jwplayer
                                     */
                                    try {

                                        let jwPlayerVolume = jwplayer().getVolume() || localStorage.getItem('jwplayer.volume') || null;
                                        if (jwPlayerVolume) {
                                            // jwPlayerVolume = parseInt(jwPlayerVolume);
                                            // console.log('jwPlayerVolume: ' + jwPlayerVolume);
                                            if (jwPlayerVolume > 0) {
                                                let num = jwPlayerVolume / 100;
                                                adsManager.setVolume(num);
                                            }
                                        }
                                    } catch (e) {
                                        //silent
                                    }

                                    adsManager.start();

                                    playing = true;

                                    showPlayButton();
                                    //showFullscreenButton();
                                    playButton.textContent = 'II';

                                    window.addEventListener('resize', function()
                                    {
                                        console.log('resize event');
                                        videoPlayer = document.getElementById('video-player-live');
                                        // prerollContainer = document.getElementById('adContainer');
                                        prerollWidth = parseInt(videoPlayer.offsetWidth);
                                        prerollHeight = parseInt(prerollWidth*(9/16));

                                        prerollContainer.style.width = prerollWidth;
                                        prerollContainer.style.height = prerollHeight + 20;

                                        adsManager.resize(prerollWidth, prerollHeight, google.ima.ViewMode.NORMAL)
                                    });

                                } catch (adError) {
                                    // An error may be thrown if there was a problem with the VAST response.
                                    console.log("onAdsManagerLoaded addd Error", prerollOnAdError);
                                    playLivestream();
                                }
                            }

                            /**
                             * Requests a preroll ad using the client side SDK.
                             * @param  {string} adTagUrl
                             */
                            function requestPreroll(adTagUrl)
                            {
                                console.log(livestreamWidth + " x " + livestreamHeight);
                                console.log("request preroll", adTagUrl);

                                var adsRequest = new google.ima.AdsRequest();
                                console.log(livestreamWidth + " x " + livestreamHeight);
                                adsRequest.adTagUrl = adTagUrl;
                                adsRequest.linearAdSlotWidth = livestreamWidth;
                                adsRequest.linearAdSlotHeight = livestreamHeight;
                                adsLoader.requestAds(adsRequest);
                            }

                            function requestLiveStream(assetKey, apiKey)
                            {
                                console.log("", "requestLiveStream","", "");

                                var streamRequest = new google.ima.dai.api.LiveStreamRequest();
                                streamRequest.assetKey = assetKey;
                                streamRequest.apiKey = apiKey || '';
                                streamManager.requestStream(streamRequest);
                            }

                            function onStreamEvent(e)
                            {
                                console.info('onStreamEvent', e );
                                //e.type = google.ima.dai.api.StreamEvent.Type.ERROR;
                                switch (e.type) {
                                    case google.ima.dai.api.StreamEvent.Type.LOADED:
                                        console.log("loadStream", e.getStreamData(), "");
                                        loadStream(e.getStreamData());
                                        break;
                                    case google.ima.dai.api.StreamEvent.Type.ERROR:
                                        console.log('Error loading stream, playing backup stream.');
                                        jwplayer().load([{'file': BACKUP_STREAM}]);
                                        jwplayer().play();
                                        break;
                                    case google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED:
                                        console.log('Ad Break Started');
                                        isAdBreak = true;
                                        // jwplayer().setControls(false);
                                        videoElement.controls = false;
                                        clickElement.style.display = 'block';
                                        break;
                                    case google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED:
                                        console.log('Ad Break Ended');
                                        isAdBreak = false;
                                        //jwplayer().setControls(true);
                                        videoElement.controls = true;
                                        clickElement.style.display = 'none';
                                        break;
                                    default:
                                        break;
                                }
                            }

                            function onAdEvent(adEvent) {
                                // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)
                                // don't have ad object associated.
                                var ad = adEvent.getAd();

                                console.log(adEvent.type);
                                switch (adEvent.type) {
                                    case google.ima.AdEvent.Type.STARTED:
                                        // This event indicates the ad has started - the video player
                                        // can adjust the UI, for example display a pause button and
                                        // remaining time.
                                        console.log("ad started");
                                        if (ad.isLinear()) {
                                            // For a linear ad, a timer can be started to poll for
                                            // the remaining time.
                                            intervalTimer = setInterval(
                                                function() {
                                                    var remainingTime = adsManager.getRemainingTime();
                                                },
                                                300);  // every 300ms
                                        }
                                        break;
                                    case google.ima.AdEvent.Type.COMPLETE:
                                        // This event indicates the ad has finished - the video player
                                        // can perform appropriate UI actions, such as removing the timer for
                                        // remaining time detection.
                                        console.log('ad complete');
                                        if (ad.isLinear()) {
                                            clearInterval(intervalTimer);
                                        }
                                        hidePlayButton();
                                        //hideFullscreenButton();
                                        break;
                                }
                            }

                            function showPlayButton() {
                                playButton.style.display = 'block';
                            }

                            function hidePlayButton() {
                                playButton.style.display = 'none';
                            }

                            function showFullscreenButton() {
                                fullscreenButton.style.display = 'block';
                            }

                            function hideFullscreenButton() {
                                fullscreenButton.style.display = 'none';
                            }

                            function loadStream(data)
                            {
                                var url = data['url'];
                                console.log('load stream :' + url);

                                // jwplayer().setControls(true);
                                // jwplayer().load([{'file': url}]);
                                // jwplayer().setControls(true);
                                // jwplayer().play();

                                hls.loadSource(url);
                                hls.attachMedia(videoElement);
                                hls.on(Hls.Events.MANIFEST_PARSED, function() {
                                    console.log('Video Play');
                                    console.log("videoElement", videoElement);
                                    videoElement.play();
                                });
                            }

                            function onStreamPause()
                            {
                                console.log('onStreamPause');
                                if (isAdBreak) {
                                    videoElement.controls = true;
                                    adUiElement.style.display = 'none';
                                }
                            }

                            function onStreamPlay()
                            {
                                console.log('onStreamPlay');
                                if (isAdBreak) {
                                    videoElement.controls = false;
                                    adUiElement.style.display = 'block';
                                }
                            }

                            function playLivestream()
                            {
                                hidePlayButton();
                                //hideFullscreenButton();
                                $("#adContainer").remove();
                                console.log('playLivestream');
                                player.play();
                                //videoElement.controls = false;
                                //adUiElement.style.display = 'block';
                                player.setControls(true);
                            }

                            /**
                             * Handles an ad error (client side ads).
                             * @param  {AdErrorEvent} adErrorEvent
                             */
                            function prerollOnAdError(adErrorEvent)
                            {
                                console.error("adErrorEvent", adErrorEvent.getError());
                                if (adsManager) {
                                    adsManager.destroy();
                                }
                                hidePlayButton();
                                //hideFullscreenButton();
                                playLivestream();
                            }

                                //appEngine.definitionGet('app.utils.addVideoToStash')(player, gtmVideoArticle);

                                break;

                            case 'livestream-radio' :
                                id = 'video-player-live';

                                var player = jwplayer(id);

                                var videoCfg = {
                                    file: jsonCfg['new-info']['meta']['source'] || "",
                                    width: "100%",
                                    aspectratio: "16:9",
                                    autostart: true,
                                    stretching: 'uniform', // exactfit
                                    preload: 'auto',
                                    controls: 'true',
                                    primary: "flash", // "html5"
                                    pipIcon: 'disabled'
                                };

                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if (advertising) {
                                    //console.log(advertising);
                                    videoCfg.advertising = advertising;
                                }

                                player.setup(videoCfg);

                                break;
                            case 'audio-dancefm-stream' :

                                id = 'video-player-live';
                                var playerInstance = jwplayer(id);

                                var audioCfg = {
                                    file: "https://edge126.rcs-rds.ro/profm/dancefm.mp3",
                                    width: "100%",
                                    aspectratio: "16:9",
                                    autostart: true,
                                    stretching: 'uniform',
                                    preload: 'auto',
                                    controls: 'true',
                                    pipIcon: 'disabled'
                                };
                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if (advertising) {
                                    //console.log(advertising);
                                    audioCfg.advertising = advertising;
                                }

                                playerInstance.setup(audioCfg);

                                if (canAllowTrackingCode) {
                                    var prefix = 'v18';
                                    var _cx_audioId = String(id);

                                    window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                                    cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                                    // Play event
                                    var playerState; // to avoid sending play when skipping
                                    var sentZero = false;
                                    var sentMinStatus = {};
                                    var timer;
                                    var currentPosition = 0;

                                    playerInstance.on('play', function () {
                                        if (playerState !== 'play') {
                                            cX.callQueue.push(['sendEvent', 'play', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);
                                            playerState = 'play';
                                        }

                                        if (! sentZero) {
                                            cX.callQueue.push(['sendEvent', 'sendLiveOffsetPercentage', { aid: _cx_audioId, percentage: '0', durata: 'nedeterminata', tip_play: 'autoplay'}]);
                                            sentZero = true;
                                        }

                                        // decided to use setInterval because on('time') stops at second 117
                                        let minute = 0;
                                        timer = setInterval(() => {
                                            minute = currentPosition / 60;
                                            if (minute && Number.isInteger(minute) && !sentMinStatus[minute]) {
                                                if (!this.id || !minute) {
                                                    return;
                                                }

                                                minute = String(minute);
                                                cX.callQueue.push(['sendEvent', 'sendLivePlayed', { vid: String(this.id), time: minute }]);

                                                sentMinStatus[minute] = true;
                                            }
                                            currentPosition++;
                                        }, 1000)
                                    });

                                    // Pause event
                                    playerInstance.on('pause', function () {
                                        cX.callQueue.push(['sendEvent', 'pause', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);

                                        playerState = 'pause';
                                        sentMinStatus = {};
                                        clearInterval(timer);
                                        currentPosition = 0;
                                    });
                                }
                                break;

                            case 'audio-digifm-stream' :

                                id = 'video-player-live';
                                var playerInstance = jwplayer(id);

                                var audioCfg = {
                                    file: "https://edge76.rcs-rds.ro/digifm/digifm.mp3",
                                    width: "100%",
                                    aspectratio: "16:9",
                                    autostart: true,
                                    stretching: 'uniform',
                                    preload: 'auto',
                                    controls: 'true',
                                    pipIcon: 'disabled'
                                };
                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if (advertising) {
                                    //console.log(advertising);
                                    audioCfg.advertising = advertising;
                                }

                                playerInstance.setup(audioCfg);

                                if (canAllowTrackingCode) {
                                    var prefix = 'v18';
                                    var _cx_audioId = String(id);

                                    window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                                    cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                                    // Play event
                                    var playerState; // to avoid sending play when skipping
                                    var sentZero = false;
                                    var sentMinStatus = {};
                                    var timer;
                                    var currentPosition = 0;

                                    playerInstance.on('play', function () {
                                        if (playerState !== 'play') {
                                            cX.callQueue.push(['sendEvent', 'play', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);
                                            playerState = 'play';
                                        }

                                        if (! sentZero) {
                                            cX.callQueue.push(['sendEvent', 'sendLiveOffsetPercentage', { aid: _cx_audioId, percentage: '0', durata: 'nedeterminata', tip_play: 'autoplay'}]);
                                            sentZero = true;
                                        }

                                        // decided to use setInterval because on('time') stops at second 117
                                        let minute = 0;
                                        timer = setInterval(() => {
                                            minute = currentPosition / 60;
                                            if (minute && Number.isInteger(minute) && !sentMinStatus[minute]) {
                                                if (!this.id || !minute) {
                                                    return;
                                                }

                                                minute = String(minute);
                                                cX.callQueue.push(['sendEvent', 'sendLivePlayed', { vid: String(this.id), time: minute }]);

                                                sentMinStatus[minute] = true;
                                            }
                                            currentPosition++;
                                        }, 1000)
                                    });

                                    // Pause event
                                    playerInstance.on('pause', function () {
                                        cX.callQueue.push(['sendEvent', 'pause', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);

                                        playerState = 'pause';
                                        sentMinStatus = {};
                                        clearInterval(timer);
                                        currentPosition = 0;
                                    });
                                }
                                break;

                            case 'audio-profm-stream' :

                                id = 'video-player-live';
                                var playerInstance = jwplayer(id);

                                var audioCfg = {
                                    file: "https://edge126.rcs-rds.ro/profm/profm.mp3",
                                    width: "100%",
                                    height: "auto",
                                    aspectratio: "16:9",
                                    autostart: true,
                                    stretching: 'uniform',
                                    preload: 'auto',
                                    controls: 'true',
                                    pipIcon: 'disabled'
                                };
                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if (advertising) {
                                    //console.log(advertising);
                                    audioCfg.advertising = advertising;
                                }

                                playerInstance.setup(audioCfg);

                                if (canAllowTrackingCode) {
                                    var prefix = 'v18';
                                    var _cx_audioId = String(id);

                                    window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                                    cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                                    // Play event
                                    var playerState; // to avoid sending play when skipping
                                    var sentZero = false;
                                    var sentMinStatus = {};
                                    var timer;
                                    var currentPosition = 0;

                                    playerInstance.on('play', function () {
                                        if (playerState !== 'play') {
                                            cX.callQueue.push(['sendEvent', 'play', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);
                                            playerState = 'play';
                                        }

                                        if (! sentZero) {
                                            cX.callQueue.push(['sendEvent', 'sendLiveOffsetPercentage', { aid: _cx_audioId, percentage: '0', durata: 'nedeterminata', tip_play: 'autoplay'}]);
                                            sentZero = true;
                                        }

                                        // decided to use setInterval because on('time') stops at second 117
                                        let minute = 0;
                                        timer = setInterval(() => {
                                            minute = currentPosition / 60;
                                            if (minute && Number.isInteger(minute) && !sentMinStatus[minute]) {
                                                if (!this.id || !minute) {
                                                    return;
                                                }

                                                minute = String(minute);
                                                cX.callQueue.push(['sendEvent', 'sendLivePlayed', { vid: String(this.id), time: minute }]);

                                                sentMinStatus[minute] = true;
                                            }
                                            currentPosition++;
                                        }, 1000)
                                    });

                                    // Pause event
                                    playerInstance.on('pause', function () {
                                        cX.callQueue.push(['sendEvent', 'pause', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);

                                        playerState = 'pause';
                                        sentMinStatus = {};
                                        clearInterval(timer);
                                        currentPosition = 0;
                                    });
                                }
                                break;

                            case 'audio-digi24-fm-stream' :

                                id = 'video-player-live';
                                var playerInstance = jwplayer(id);

                                var audioCfg = {
                                    file: "https://edge76.rcs-rds.ro/digifm/digi24fm.mp3",
                                    width: "100%",
                                    height: "auto",
                                    aspectratio: "16:9",
                                    autostart: true,
                                    stretching: 'uniform',
                                    preload: 'auto',
                                    controls: 'true',
                                    pipIcon: 'disabled'
                                };

                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if (advertising) {
                                    //console.log(advertising);
                                    audioCfg.advertising = advertising;
                                }

                                playerInstance.setup(audioCfg);

                                if (canAllowTrackingCode) {
                                    var prefix = 'v18';
                                    var _cx_audioId = String(id);

                                    window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                                    cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                                    // Play event
                                    var playerState; // to avoid sending play when skipping
                                    var sentZero = false;
                                    var sentMinStatus = {};
                                    var timer;
                                    var currentPosition = 0;

                                    playerInstance.on('play', function () {
                                        if (playerState !== 'play') {
                                            cX.callQueue.push(['sendEvent', 'play', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);
                                            playerState = 'play';
                                        }

                                        if (! sentZero) {
                                            cX.callQueue.push(['sendEvent', 'sendLiveOffsetPercentage', { aid: _cx_audioId, percentage: '0', durata: 'nedeterminata', tip_play: 'autoplay'}]);
                                            sentZero = true;
                                        }

                                        let minute = 0;
                                        timer = setInterval(() => {
                                            minute = currentPosition / 60;
                                            if (minute && Number.isInteger(minute) && !sentMinStatus[minute]) {
                                                if (!this.id || !minute) {
                                                    return;
                                                }

                                                minute = String(minute);
                                                cX.callQueue.push(['sendEvent', 'sendLivePlayed', { vid: String(this.id), time: minute }]);

                                                sentMinStatus[minute] = true;
                                            }
                                            currentPosition++;
                                        }, 1000)
                                    });

                                    // Pause event
                                    playerInstance.on('pause', function () {
                                        cX.callQueue.push(['sendEvent', 'pause', { aid: _cx_audioId, durata: 'nedeterminata', tip_play: 'autoplay' }]);

                                        playerState = 'pause';
                                        sentMinStatus = {};
                                        clearInterval(timer);
                                        currentPosition = 0;
                                    });
                                }
                                break;
                            case 'video' :

                                // @IMPORTANT Only local videos are embeded (not galleries, livestreams, embeded-urls etc.)
                                videoIndexInArticle++;

                                if ( ! jsonCfg["new-info"]) {
                                    throw new Error('Invalid video cfg new-info');
                                }
                                if ( ! jsonCfg["new-info"]["meta"]) {
                                    throw new Error('Invalid video cfg new-info meta');
                                }
                                if ( ! jsonCfg["new-info"]["meta"]["source"]) {
                                    throw new Error('Invalid video cfg new-info meta source');
                                }
                                var preload   = jsonCfg["new-info"]["meta"]["preload"] || 'auto';
                                var source    = jsonCfg["new-info"]["meta"]["source"];
                                var versions  = jsonCfg["new-info"]["meta"]["versions"] || {};
                                var snapshots = jsonCfg["new-info"]["meta"]["snapshots"] || [];
                                var mute      = jsonCfg["new-info"]["meta"]["mute"] || 'false';
                                var sources = [];
                                var hdFound = false;
                                var hdVersionFound = null;
                                var defaultFound = false;
                                var defaultVersionFound = false;
                                $.each([
                                    "720p.mp4",
                                    "480p.mp4",
                                    "360p.mp4",
                                    "240p.mp4"
                                ], function (i, kk) {
                                    if ( ! versions[kk]) {
                                        return;
                                    } else {
                                    }
                                    var e = kk;
                                    var file = versions[kk];
                                    var cfgs = e.split(".");
                                    var type = null;
                                    var lbl = null;
                                    if (cfgs.length > 1) {
                                        type = cfgs[cfgs.length - 1];
                                        lbl = cfgs.slice(0, cfgs.length - 1).join(".");
                                    } else {
                                        type = cfgs[0];
                                        lbl = cfgs[0];
                                    }
                                    if (
                                        ( ! hdFound && lbl == '720p')
                                        || ( ! hdFound && lbl == '480p')
                                        || ( ! hdFound && lbl == '240p')
                                    ) {
                                        hdFound = true;
                                        hdVersionFound = lbl;
                                    }
                                    var sourceDefaultItem = false;
                                    if (
                                        ( ! defaultFound && lbl == '480p')
                                        || ( ! defaultFound && lbl == '240p')
                                    ) {
                                        defaultFound = true;
                                        defaultVersionFound = lbl;
                                        sourceDefaultItem = true;
                                    }
                                    var source = {
                                        file: file,
                                        // type: type,
                                        label: lbl
                                    };
                                    if ( !! sourceDefaultItem) {
                                        source =  {
                                            file: file,
                                            // type: type,
                                            label: lbl,
                                            "default" : "true"
                                        };
                                    }
                                    sources.push(source);
                                });
                                if ( ! hdFound && sources.length) {
                                    // sources[0]["default"] = true;
                                    sources.unshift({
                                        file: source,
                                        label: "HD"
                                    });
                                } else if ( ! sources.length) {
                                    sources.unshift({
                                        file: source,
                                        label: "HD"
                                    });
                                } else {

                                }

                                var image = snapshots[5] || snapshots[4] || snapshots[0] || null;

                                // @INFO Show embed-widget only in not inside iframe (videos in iframe are already embeded)
                                if (window.self === window.top) {
                                    var videoUrlArticle = $video.closest('.data-app-meta-article').attr('data-embed-base-url-canonical');
                                    if (videoUrlArticle) {
                                        var embedCode = appEngine.definitionGet('app.utils.extractVideoEmbedHtml')($video, videoUrlArticle, videoIndexInArticle);

                                        if (embedCode) {
                                            $video.parent().append($(embedCode));
                                        }
                                    }
                                }

                                var articleCfg = {};
                                try {
                                    articleCfg = $.parseJSON($.trim($video.closest('.data-app-meta')
                                        .find('script.app-entity-meta-cfg[type="text/template"]')
                                        .html()));
                                } catch (e) {
                                    console.warn(e);
                                    articleCfg = {};
                                }

                                var id = null;
                                if ( ! $video.attr('id')) {
                                    id = 'video-' + appEngine.definitionGet('app.utils.uniqid')();
                                    $video.attr('id', id);
                                } else {
                                    id = $video.attr('id');
                                }
                                var player = jwplayer(id);
                                var videoCfg = {
                                    image: image,
                                    sources: sources,
                                    width: "100%",
                                    aspectratio: "16:9",
                                    stretching: 'uniform',
                                    primary: "html5",
                                    bufferlength: '5',
                                    smoothing: 'true',
                                    deblocking: 'true',
                                    cast: {},
                                    skin: {name: 'seven'},
                                    preload: preload,
                                    autostart: 'false',
                                    mute: mute,
                                    pipIcon: 'disabled'
                                };

                                // if (index == 0) {
                                //     videoCfg.autostart = 'viewable';
                                //     videoCfg.mute = 'true';
                                // }

                                var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                if (! $.isEmptyObject(advertising)) {
                                    videoCfg.advertising = advertising;
                                }

                                // console.log(videoCfg, JSON.stringify(videoCfg));

                                player.setup(videoCfg);

                                if (canAllowTrackingCode) {
                                    appEngine.definitionGet('app.utils.addVideoToStash')(player, gtmVideoArticle);
                                }
                                break;

                            case 'webcam':
                                console.log(jsonCfg);

                                var id = null;
                                if ( ! $video.attr('id')) {
                                    id = 'video-' + appEngine.definitionGet('app.utils.uniqid')();
                                    $video.attr('id', id);
                                } else {
                                    id = $video.attr('id');
                                }

                                if (jsonCfg !== null && typeof jsonCfg === 'object') {
                                    var player = jwplayer(id);

                                    var videoCfg = {
                                        file: jsonCfg['stream'],
                                        width: "100%",
                                        aspectratio: "16:9",
                                        autostart: 'true',
                                        stretching: 'uniform',
                                        preload: 'auto',
                                        controls: 'true',
                                        primary: 'html5',
                                        cast: {},
                                        title: 'Digi Webcams',
                                        bufferlength: '5',
                                        skin: {name: 'seven'},
                                        smoothing: 'true',
                                        deblocking: 'true',
                                        pipIcon: 'disabled'
                                    }

                                    var advertising = appEngine.definitionGet('app.utils.videoGetAdvertising')();
                                    if (! $.isEmptyObject(advertising)) {
                                        videoCfg.advertising = advertising;
                                    }

                                    player.setup(videoCfg);
                                } else {
                                    throw new Error("Video cfg is not a valid object!");
                                }

                                break;
                            default :
                                throw new Error('Invalid video shortcode ' + jsonCfg["shortcode"]);
                                break;
                        }
                    } catch (e) {
                        console.warn('Video parse err', e);
                    }
                });
            }
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appArticleWidgets" with initVideoInContainer callback
 *
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appArticleWidgets').addCallback(
        appEngine.definitionGet('app.utils.initVideoInContainer')
    );
})(appEngine, $);

(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initAnalyticsInternalPingInContainer',
        (function (appEngine, $, undefined) {
            return function ($articleJqColl) {
                if ( ! $articleJqColl instanceof $) {
                    throw new Error('Invalid param - expecting jquery collection');
                }

                $articleJqColl.each( function (i, elem) {
                    var $this = $(elem);

                    var cfg = $.parseJSON($.trim($this.find('script.app-entity-meta-cfg[type="text/template"]').html()));

                    if (cfg) {
                        appEngine.definitionGet('app.utils.appAnalyticsPageMetaPingV2').handleByMetaCfg(cfg);
                    }
                });
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appArticleWidgets" with initAnalyticsInternalPingInContainer callback
 *
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appArticleWidgets').addCallback(
        appEngine.definitionGet('app.utils.initAnalyticsInternalPingInContainer')
    );
})(appEngine, $);

(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initAnalyticsGtmContainer',
        (function (appEngine, $, undefined) {
            return function ($articleJqColl) {
                if ( ! $articleJqColl instanceof $) {
                    throw new Error('Invalid param - expecting jquery collection');
                }
                $articleJqColl.each( function (i, elem) {
                    var $this = $(elem);
                    var appEntityGtm = $this.find('script.app-entity-gtm-cfg[type="text/template"]');
                    if (appEntityGtm && appEntityGtm.length) {
                        var cfg = $.parseJSON($.trim(appEntityGtm.html()));
                        if (cfg) {
                            appEngine.definitionGet('app.utils.appAnalyticsGtmPing').handleByGtmCfg(cfg);
                        }
                    }
                });
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appArticleWidgets" with initAnalyticsInternalPingInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appArticleWidgets').addCallback(
        appEngine.definitionGet('app.utils.initAnalyticsGtmContainer')
    );
})(appEngine, $);

/**
 * Populate "appLiveWidgets" with initVideoInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appLiveWidgets').addCallback(
        appEngine.definitionGet('app.utils.initVideoInContainer')
    );
})(appEngine, $);


/**
 * Populate "appLiveHomepageWidgets" with initVideoInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appLiveHomepageWidgets').addCallback(
        appEngine.definitionGet('app.utils.initVideoInContainer')
    );
})(appEngine, $);

/**
 * Populate "appInterviewHomepageWidgets" with initVideoInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appInterviewHomepageWidgets').addCallback(
        appEngine.definitionGet('app.utils.initVideoInContainer')
    );
})(appEngine, $);


/**
 * Populate "appArticleEmbedWidgets" with initVideoInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appArticleEmbedWidgets').addCallback(
        appEngine.definitionGet('app.utils.initVideoInContainer')
    );
})(appEngine, $);

/**
 * Populate "appArticleEmbedWidgets" with initAnalyticsInternalPingInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appArticleEmbedWidgets').addCallback(
        appEngine.definitionGet('app.utils.initAnalyticsInternalPingInContainer')
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initIframeInContainer'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initIframeInContainer',
        (function (appEngine, $, undefined) {
            return function ($articleJqColl) {
                if ( ! $articleJqColl instanceof $) {
                    throw new Error('Invalid param - expecting jquery collection');
                }
                var videoIndexInArticle = -1;
                $articleJqColl.find('.app-embed-from-url').each( function (elem) {

                    var $embed = $(this);
                    if ($embed.attr('iframe-init')) {
                        return;
                    }
                    $embed.attr('iframe-init', 1);

                    var w = 585;
                    var h = 329;
                    if (appEngine.definitionGet('app.utils.isMobileEnv')()) {
                        w = Math.min(320, parseInt($embed.parent().width()) - 4);
                        h = parseInt((329 / 585) * w);
                    }

                    $embed.html([
                        '<iframe marginwidth="0" marginheight="0" align="top" scrolling="No" frameborder="0" hspace="0" vspace="0" width="' + w + '" height="' + h + '" src="' + $embed.attr('data-src') + '" allowfullscreen>',
                        '</iframe>'
                    ].join(''));

                });
            }
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appArticleWidgets" with initIframeInContainer callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appArticleWidgets').addCallback(
        appEngine.definitionGet('app.utils.initIframeInContainer')
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initLiveFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initLiveFormEngine',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        var cfg = $.parseJSON($.trim($this.find('#form-live-cfg').html()));
                        $this.find('select[name="station"]').on('change', function (e) {
                            var val = $(this).val();
                            var url = cfg[val] || null;
                            if (url) {
                                window.location.href = url;
                            }
                        });
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appLiveFormWidgets" with video init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appLiveFormWidgets').addCallback(
        appEngine.definitionGet('app.utils.initLiveFormEngine')
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initForecastEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initForecastEngine',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);

                        // links
                        var $regions = $('.change-regions');

                        $regions.on('change', function(e) {
                            window.location.href = $(this).val();
                        });

                        var cfg = $.parseJSON($.trim($('#forecast-cfg').html()));
                        var $boxForecast = $('.box-forecast');

                        var $map = $('.map a, .change-forecast a').on('click', function(e) {
                            e.preventDefault();

                            var $this = $(this);
                            var city = $.grep(cfg, function(e){ return e.value == $this.data('value'); });
                            city = city[0];

                            var currForecast = $.grep(cfg, function(e){ return e.value == $this.data('date'); }); // CHECK!!!!!!!

                            if (currForecast[0].date.hasOwnProperty('today')) {
                                var today = currForecast[0].date.today; //201611110000

                                var todayObj = $.grep(city._ossTmp.forecastDayValuesArr.forecasts, function(e){ return e.datetime == today; });

                                if (todayObj.length > 0) {
                                    var todayTemp = todayObj[0].temperature;
                                    $boxForecast.find('.next-today').text(todayTemp);
                                    var todaySymbol = todayObj[0].symbol;
                                    $boxForecast.find('.next-today-symbol').html('<span class="icon icon-meteo-' + todaySymbol + '" role="img"><svg><title>meteo-' + todaySymbol + ' icon</title><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="/static/theme-repo/dist/assets/svg/icons-meteo.svg#icon-meteo-' + todaySymbol + '"></use><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="#icon-meteo-' + todaySymbol + '"></use></svg></span>');
                                }

                            }

                            /** Tonight */
                            var tonight = currForecast[0].date.tonight; //201611110000
                            var tonightObj = $.grep(city._ossTmp.forecastDayValuesArr.forecasts, function(e){ return e.datetime == tonight; });

                            if (tonightObj.length > 0) {
                                var tonightTemp = tonightObj[0].temperature;
                                $boxForecast.find('.next-tonight').text(tonightTemp);
                                var tonightSymbol = tonightObj[0].symbol;
                                $boxForecast.find('.next-tonight-symbol').html('<span class="icon icon-meteo-' + tonightSymbol + '" role="img"><svg><title>meteo-' + tonightSymbol + ' icon</title><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="/static/theme-repo/dist/assets/svg/icons-meteo.svg#icon-meteo-' + tonightSymbol + '"></use><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="#icon-meteo-' + tonightSymbol + '"></use></svg></span>');
                            }

                            /** Tomorrow day */
                            var tomorrowDay = currForecast[0].date.tomorrowDay; //201611110000
                            var tomorrowDayObj = $.grep(city._ossTmp.forecastDayValuesArr.forecasts, function(e){ return e.datetime == tomorrowDay; });
                            var tomorrowDayTemp = tomorrowDayObj[0].temperature;
                            var tomorrowDaySymbol = tomorrowDayObj[0].symbol;

                            /** Tomorrow night */
                            var tomorrowNight = currForecast[0].date.tomorrowNight; //201611110000
                            var tomorrowNightObj = $.grep(city._ossTmp.forecastDayValuesArr.forecasts, function(e){ return e.datetime == tomorrowNight; });
                            var tomorrowNightTemp = tomorrowNightObj[0].temperature;


                            /** Now */
                            var nowSymbol = city._ossTmp.dayValueArr.forecasts[0].symbol;
                            $boxForecast.find('.now-city').text(city.label);
                            $boxForecast.find('.now-temp').text(city._ossTmp.dayValueArr.forecasts[0].temperature);
                            $boxForecast.find('.now-pressure').text(city._ossTmp.dayValueArr.forecasts[0].airpressure);
                            $boxForecast.find('.now-wind').text(city._ossTmp.dayValueArr.forecasts[0].windspeed);
                            $boxForecast.find('.now-wind').text(city._ossTmp.dayValueArr.forecasts[0].windspeed);
                            $boxForecast.find('.now-icon-weather-symbol').html('<span class="icon icon-meteo-' + nowSymbol + '" role="img"><svg><title>meteo-' + nowSymbol + ' icon</title><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="/static/theme-repo/dist/assets/svg/icons-meteo.svg#icon-meteo-' + nowSymbol + '"></use><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="#icon-meteo-' + nowSymbol + '"></use></svg></span>');

                            $boxForecast.find('.next-tomorrow-day').text(tomorrowDayTemp);
                            $boxForecast.find('.next-tomorrow-night').text(tomorrowNightTemp);

                            $boxForecast.find('.next-tomorrow-day-symbol').html('<span class="icon icon-meteo-' + tomorrowDaySymbol + '" role="img"><svg><title>meteo-' + tomorrowDaySymbol + ' icon</title><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="/static/theme-repo/dist/assets/svg/icons-meteo.svg#icon-meteo-' + tomorrowDaySymbol + '"></use><use xmlns:xlink="https://www.w3.org/1999/xlink" xlink:href="#icon-meteo-' + tomorrowDaySymbol + '"></use></svg></span>');

                            if ($boxForecast.length) {
                                var top = $boxForecast.offset().top - $('header').height();
                                $('html,body').animate({scrollTop: top}, 500);
                                return false;
                            }

                        });
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appForecastWidgets" with video init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appForecastWidgets').addCallback(
        appEngine.definitionGet('app.utils.initForecastEngine')
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initShowsFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initShowsFormEngine',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        $this.find('select[name="showCat"]').on('change', function (e) {
                            var url = $(this).val();
                            if (url) {
                                window.location.href = url;
                            }
                        });
                    });
                }
            };

        })(appEngine, $)
    );
})(appEngine, $);

/*
*  Decorate AppEngine with 'app.utils.initTvStarsFormEngine'
*/
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initTvStarsFormEngine',
        (function ( appEngine, $, undefined) {
            return function ($jqCollection) {
                if($jqCollection.length) {
                    var starsContainer = $(".tv-stars-container");

                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        $this.find('select[name="showCat"]').on('change', function (e) {
                            e.preventDefault();

                            var section = $("select[name='showCat'] option:selected").data("section").toString();

                            if (section == "") {
                                starsContainer.find("article.tv-star").show();
                            } else {
                                starsContainer.find("article.tv-star").hide();
                                starsContainer.find("article." + section).show();
                            }
                        });
                    });
                }
            }
        })(appEngine, $)
    )
})(appEngine, $);

/**
 * Populate "appShowsFormWidgets" with shows form init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appShowsFormWidgets').addCallback(
        appEngine.definitionGet('app.utils.initShowsFormEngine')
    );
})(appEngine, $);

/**
 * Populate "appTvStarsFormWidgets with tv stars filtering callback"
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appTvStarsFormWidgets').addCallback(
        appEngine.definitionGet('app.utils.initTvStarsFormEngine')
    );
})(appEngine, $);

/**
 * Add registry "appDigiVoxFormWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appDigiVoxFormWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initDigiVoxFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initDigiVoxFormEngine',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        (function ($this) {
                            var $upload = $this.find('#upload-file');
                            if ( ! $upload.length) {
                                return;
                            }
                            var cfg = $.parseJSON($.trim($upload.find('#upload-cfg').html()));
                            var w = $upload.width() - 4;
                            var ls = [];
                            var addToFileList = (function ($this) {
                                return function (url, file) {
                                    ls.push(url);
                                    $this.find('#input4').val(ls.join(','));
                                }
                            })($this);
                            var widget = $this.find('#upload-file').uploadFile({
                                url : cfg.fileUploadUrl,
                                fileName : cfg.fileName,
                                statusBarWidth : w,
                                dragdropWidth : w,
                                customErrorKeyStr : 'jquery-upload-file-error',
                                fileCounterStyle : ') ',
                                returnType : "json",
                                onSuccess : function (files, data, xhr, pd) {
                                    addToFileList(data['data'], files[0]);
                                    // console.log('ON-SUCCESS', data['data']);
                                },
                                dragDrop: false,
                                multiple : false,
                                showDelete: false // if is true, refactory the code to eliminate the uploaded file
                            });
                            $this.on('submit', function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                var data = $(this).serialize();
                                var url = $(this).attr('action');
                                var xhr = $.ajax({
                                    url: url,
                                    method: 'POST',
                                    data: data,
                                });
                                xhr.done( function (rsp) {
                                    if ( ! rsp.success) {
                                        var msg = "Unul sau mai multe campuri nu au fost completate corect!";
                                        //var msg = 'Error sending data! ';
                                        //msg += (rsp['ajax-submit-error'] || 'Unknown error!');
                                        window.alert(msg);
                                    } else {
                                        window.alert('Success sending data!');
                                        window.location.href = window.location.href;
                                    }
                                });
                                xhr.fail( function (jqXHR, textStatus, errorThrown) {
                                    window.alert('Error sending contact data! Invalid response!');
                                });
                            });
                        })($this);
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appStickyWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appStickyWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initStickyWidgets'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initStickyWidgets',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {

                        console.error("Please remove me!");
                        var $this = $(this);
                        (function ($this) {

                            var arraySticky   = $('#sticky').attr('class');

                            if(typeof arraySticky !== "undefined") {
                                arraySticky = arraySticky.split(" ");
                                var classSticky = "." + arraySticky[arraySticky.length - 2] + "." + arraySticky[arraySticky.length - 1];
                            }

                            if(Cookies.get('stickyCookie') != classSticky) {
                                Cookies.set('stickyCookie', classSticky, {expires: 0, path: '/'});
                                $(classSticky).show();
                            }

                            $document.find(classSticky).on('click', '#sticky-close', function(e) {
                                $(classSticky).hide();
                                Cookies.set('stickyCookie',classSticky, { expires: 365, path: '/' });
                                e.preventDefault();
                            });

                        })($this);
                    });
                }

            };

        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appStickyWidgets" with multi-file-plugin init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appStickyWidgets').addCallback(
        appEngine.definitionGet('app.utils.initStickyWidgets')
    );
})(appEngine, $);

/**
 * Populate "appDigiVoxFormWidgets" with multi-file-plugin init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appDigiVoxFormWidgets').addCallback(
        appEngine.definitionGet('app.utils.initDigiVoxFormEngine')
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initDigiVoxFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initContactInContainer',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        (function ($this) {
                            $this.on('click', '.nav-link', function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                var $that = $(this);
                                var $nav = $that.closest('.nav-pills');
                                $nav.find('.nav-link').removeClass('active');
                                $that.addClass('active');
                                var $tgMap = $this.find('#' + $that.attr('data-target-map'));
                                var $tgInfo = $this.find('#' + $that.attr('data-target-info'));
                                $tgInfo.parent().children().hide();
                                $tgInfo.show();
                                $tgMap.show();
                            })
                        })($this);
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initContactInContainerMob'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initContactInContainerMob',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);

                        (function ($this) {
                            $this.on('change', '.form-control', function (e) {
                                var $that = $(this);
                                var $current = $that.find('option:selected');
                                var $tgMap = $current.attr("data-target-map");
                                var $tgInfo = $current.attr("data-target-info");

                                $('.app-item-info, .app-item-map ').removeClass('active');

                                $('#' + $tgMap).addClass('active');
                                $('#' + $tgInfo).addClass('active');
                            })
                        })($this);
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appContactWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appContactWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appContactWidgets" with contact info init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appContactWidgets').addCallback(
        appEngine.definitionGet('app.utils.initContactInContainer')
    );
})(appEngine, $);

/**
 * Add registry "appContactWidgetsMob"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appContactWidgetsMob',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appContactWidgetsMob" with contact info init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appContactWidgetsMob').addCallback(
        appEngine.definitionGet('app.utils.initContactInContainerMob')
    );
})(appEngine, $);

/**
 * Add registry "appContactFormWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appContactFormWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appTvChannelsWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appTvChannelsWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appTvStarsWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appTvStarsWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Add registry "appSatiAmplitudePlayer"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appSatiAmplitudePlayer',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initDigiVoxFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initNavigationDigi24CodeContainer',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        $this.find('select[name="station"]').on('change', function (e) {
                            var v = $(this).val();
                            if (v.indexOf('http') === 0) {
                                var win = window.open(v, '_blank');
                                win.focus();
                            } else {
                                document.location.href = v;
                            }
                        });
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.filterTvStars'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.filterTvStars',
        (function (appEngine, $, undefined) {
            return function ($jqCollection)
            {
                var starsContainer = $(".tv-stars-container");

                $jqCollection.on("click", ".filter-star", function(e)
                {
                    //console.log("click", $(this).html(), $(this).data("section"));
                    e.preventDefault();
                    var section = $(this).data("section").toString();

                    if (section == "") {
                        starsContainer.find("article.tv-star").show();
                    } else {
                        starsContainer.find("article.tv-star").hide();
                        starsContainer.find("article." + section).show();
                    }

                    $jqCollection.find("a.active").removeClass('active');
                    $(this).addClass('active');

                });

            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initSatiAmplitudePlayer'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initSatiAmplitudePlayer',
        (function (appEngine, $, undefined) {
            return function ($jqCollection)
            {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {

                        document.addEventListener('listenCount', function(e)
                        {
                            let playerId = $(e.detail.element).data('player-id') || null;

                            // initialize Cxense DMP Events
                            window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                            let prefix = 'v18';
                            cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                            let _cx_audioID = String(playerId);

                            window.dataLayer = window.dataLayer || [];

                            switch (e.detail.state) {
                                case 'play':
                                    dataLayer.push({'event': 'audio_podcast', 'interaction2': 'Buton player podcast', 'podcast_label': 'Play'});
                                    cX.callQueue.push(['sendEvent', 'play', { aid: _cx_audioID, durata: 'determinata', tip_play: 'on_demand' }]);
                                    break;
                                case 'pause':
                                    dataLayer.push({'event': 'audio_podcast', 'interaction2': 'Buton player podcast', 'podcast_label': 'Pauza'});
                                    cX.callQueue.push(['sendEvent', 'pause', { aid: _cx_audioID, durata: 'determinata', tip_play: 'on_demand' }]);
                                    break;
                                default:
                                    break
                            }
                        })

                        document.addEventListener('playedSecondsTrigger', function(e)
                        {
                            let playerId = $(e.detail.element).data('player-id') || null;
                            let seconds = e.detail.seconds || null;
                            let min;

                            if (seconds) {
                                min = e.detail.seconds / 60;
                                if (!Number.isInteger(min)) {
                                    return;
                                }
                            }

                            let prefix = 'v18';

                            if (!playerId || !min) {
                                return;
                            }

                            min = String(min);

                            window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                            cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                            let _cx_audioID = String(playerId);
                            min = String(min);

                            window.cX = window.cX || {};
                            cX.callQueue = cX.callQueue || [];
                            cX.callQueue.push(['sendEvent', 'sendPodcastPlayed', { aid: _cx_audioID, time: min}]);
                        })

                        /**
                         * Send 0 percentage
                         */
                        document.addEventListener('playedPercentageTrigger', function(e)
                        {
                            let playerId = $(e.detail.element).data('player-id') || null;
                            let percentage = e.detail.percentage || 0;
                            let prefix = 'v18';

                            if (!playerId || percentage >= 0.1) {
                                return;
                            }

                            percentage = String(percentage);

                            window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                            cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                            let _cx_audioID = String(playerId);

                            window.cX = window.cX || {};
                            cX.callQueue = cX.callQueue || [];
                            cX.callQueue.push(['sendEvent', 'sendPodcastOffsetPercentage', { aid: _cx_audioID, percentage: percentage, durata: 'determinata', tip_play: 'on_demand'}]);
                        })

                        let sentStatus = {
                            25: false,
                            50: false,
                            75: false,
                            100: false
                        };

                        document.addEventListener('offsetPercentageTrigger', function(e)
                        {
                            if (sentStatus[25] && sentStatus[50] && sentStatus[75] && sentStatus[100]) {
                                // Reset sentStatus
                                sentStatus = {
                                    25: false,
                                    50: false,
                                    75: false,
                                    100: false
                                };
                                return;
                            }

                            let playerId = $(e.detail.element).data('player-id') || null;
                            let percentageComplete = e.detail.send || null;
                            let prefix = 'v18';

                            if (!playerId || !percentageComplete) {
                                return;
                            }

                            window.cX = window.cX || {}; cX.callQueue = cX.callQueue || [];
                            cX.callQueue.push(['setEventAttributes', { origin: prefix + '-audio', persistedQueryId: '62dcd1ce0898817fce2e63b0815c1675f2187cb9' }]);

                            let _cx_audioID = String(playerId);

                            window.cX = window.cX || {};
                            cX.callQueue = cX.callQueue || [];

                            // Reset sentStatus
                            if ((!percentageComplete[25] && sentStatus[25])
                                || (!percentageComplete[50] && sentStatus[50])
                                || (!percentageComplete[75] && sentStatus[75])
                            ) {
                                sentStatus = {
                                    25: false,
                                    50: false,
                                    75: false,
                                    100: false
                                };
                            }

                            if (percentageComplete[25] && !sentStatus[25]) {
                                sentStatus[25] = true;
                                cX.callQueue.push(['sendEvent', 'sendPodcastOffsetPercentage', { aid: _cx_audioID, percentage: "25", durata: 'determinata', tip_play: 'on_demand'}]);
                            }

                            if (percentageComplete[50] && sentStatus[25] && !sentStatus[50]) {
                                sentStatus[50] = true;
                                cX.callQueue.push(['sendEvent', 'sendPodcastOffsetPercentage', { aid: _cx_audioID, percentage: "50", durata: 'determinata', tip_play: 'on_demand'}]);
                            }

                            if (percentageComplete[75] && sentStatus[25] && sentStatus[50] && !sentStatus[75]) {
                                sentStatus[75] = true;
                                cX.callQueue.push(['sendEvent', 'sendPodcastOffsetPercentage', { aid: _cx_audioID, percentage: "75", durata: 'determinata', tip_play: 'on_demand'}]);
                            }

                            if (percentageComplete[100] && sentStatus[25] && sentStatus[50] && sentStatus[75] && !sentStatus[100]) {
                                sentStatus[100] = true;
                                cX.callQueue.push(['sendEvent', 'sendPodcastOffsetPercentage', { aid: _cx_audioID, percentage: "100", durata: 'determinata', tip_play: 'on_demand'}]);
                            }
                        })
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appTvChannelsWidgets" with contact info init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appTvChannelsWidgets').addCallback(
        appEngine.definitionGet('app.utils.initNavigationDigi24CodeContainer')
    );
})(appEngine, $);

/**
 * Populate "appTvStarsWidgets" with contact info init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appTvStarsWidgets').addCallback(
        appEngine.definitionGet('app.utils.filterTvStars')
    );
})(appEngine, $);

/**
 * Populate "appSatiAmplitudePlayer" with contact info init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appSatiAmplitudePlayer').addCallback(
        appEngine.definitionGet('app.utils.initSatiAmplitudePlayer')
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initDigiVoxFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initFormContactInContainer',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        (function ($this) {
                            $this.on('submit', function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                var data = $(this).serialize();
                                var url = $(this).attr('action');
                                var xhr = $.ajax({
                                    url: url,
                                    method: 'POST',
                                    data: data,
                                });
                                xhr.done( function (rsp) {
                                    if ( ! rsp.success) {
                                        //var msg = 'Error sending data! ';
                                        //msg += (rsp['ajax-submit-error'] || 'Unknown error!');
                                        var msg = "Unul sau mai multe campuri nu au fost completate corect!";
                                        window.alert(msg);
                                    } else {
                                        window.alert('Success sending data!');
                                        window.location.href = window.location.href;
                                    }
                                });
                                xhr.fail( function (jqXHR, textStatus, errorThrown) {
                                    window.alert('Error sending contact data! Invalid response!');
                                });
                            });
                        })($this);
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appContactFormWidgets" with contact info init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appContactFormWidgets').addCallback(
        appEngine.definitionGet('app.utils.initFormContactInContainer')
    );
})(appEngine, $);

/**
 * Add registry "appNewsletterFormWidgets"
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.registrySet(
        'appNewsletterFormWidgets',
        (function (appEngine, $, undefined) {
            return (appEngine.definitionGet('app.utils.factoryJQueryRunnableContainerSet'))();
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Decorate AppEngine with 'app.utils.initDigiVoxFormEngine'
 */
(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.initNewsletterFormEngine',
        (function (appEngine, $, undefined) {
            return function ($jqCollection) {
                if ($jqCollection.length) {
                    $jqCollection.each (function (el) {
                        var $this = $(this);
                        (function ($this) {
                            $this.on('submit', function (e) {
                                e.preventDefault();
                                e.stopPropagation();

                                //disable submit button before getting a response
                                $this.find('input[name=sbm]').prop("disabled", true);

                                var data = $(this).serialize();
                                var url = $(this).attr('action');
                                var xhr = $.ajax({
                                    url: url,
                                    method: 'POST',
                                    data: data,
                                });
                                xhr.done( function (rsp) {
                                    if ( ! rsp.success) {
                                        var msg = 'A aparut o eroare! Incercati din nou!';

                                        if (rsp["ajax-submit-error"] && rsp["ajax-submit-error"]["email"]) {
                                            if (rsp["ajax-submit-error"]["email"]["isEmpty"]) {
                                                msg = "Adresa de mail este obligatorie!";
                                            } else {
                                                msg = rsp["ajax-submit-error"]["email"]["callbackValue"] || msg;
                                            }
                                        }

                                        window.alert(msg);

                                    } else {
                                        window.alert('Multumim pentru abonare la newsletterul Digi24!');
                                        $this.get(0).reset();
                                    }
                                });
                                xhr.fail( function (jqXHR, textStatus, errorThrown) {
                                    window.alert('A aparut o eroare! Incercati din nou!');
                                });
                                xhr.always( function (jqXHR, textStatus, errorThrown) {
                                    //enable submit button once the response is handled
                                    $this.find('input[name=sbm]').prop("disabled", false);
                                })
                            });
                        })($this);
                    });
                }
            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * Populate "appNewsletterFormWidgets" with multi-file-plugin init callback
 */
(function (appEngine, undefined) {
    // 'use strict';
    appEngine.registryGet('appNewsletterFormWidgets').addCallback(
        appEngine.definitionGet('app.utils.initNewsletterFormEngine')
    );
})(appEngine, $);

(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.appAnalyticsV2',

        (function (appEngine, $, undefined) {
            return function ($articleJqColl) {

                console.error('This callback is not allowed anymore');
                return;

                // console.log('APP-ANALYTICS: start');

                var articleMetadata = $articleJqColl.find("#article-meta-data").html();

                if ( ! articleMetadata) {
                    // console.log('APP-ANALYTICS: stop, warn');
                    return;
                }

                articleMetadata = $.parseJSON(articleMetadata);

                console.log('APP-ANALYTICS-OLD: article-metadata', articleMetadata);

                if (! articleMetadata) {
                    console.error("Invalid json article metadata", articleMetadata);
                    return;
                }

                if ( typeof window.i == 'undefined') {
                    window.i = 1;
                }
                // console.log('APP-ANALYTICS: index IAS', window.i);

                if (window.i > 1) {
                    //google tag manager
                    dataLayer.push(articleMetadata.gtm);

                    // console.log('APP-ANALYTICS: data-layer', dataLayer[0]);
                }
                window.i++;

                // console.log('APP-ANALYTICS: stop, ok');
            }
        })(appEngine, $)

    );
})(appEngine, $);

(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.appAnalyticsGtmPing',
        (function (appEngine, $, undefined) {
            var contentHasLoaded = false;
            return {
                handleByGtmCfg: function (cfg) {
                    console.log('--CALL--', 'handleByGtmCfg', cfg);
                    if (this.canPing()) {
                        console.log('GTM-ANALYTICS: (re)ping views - on the road');
                        dataLayer.push(cfg);
                        dataLayer.push({'event':'content loaded'});
                    }
                },
                canPing: function () {
                    return true;
                }

            };
        })(appEngine, $)
    );
})(appEngine, $);

(function (appEngine, $, undefined) {
    // 'use strict';
    appEngine.definitionSet(
        'app.utils.appAnalyticsPageMetaPingV2',
        (function (appEngine, $, undefined) {
            return {
                randomNumber: 1,
                handleByMetaCfg: function (cfg) {
                    console.log('--CALL--', 'handleByMetaCfg', cfg);
                    if (cfg
                        && cfg.section
                        && (
                            "article" == cfg.section
                            || "article/video" == cfg.section
                            || "article/embed" == cfg.section
                        )
                    ) {
                        if (this.canPing()) {
                            console.log('APP-ANALYTICS: ping views - on the road');

                            if (this.randomNumber) {
                                cfg.random = this.randomNumber;
                            }

                            if (document.referrer) {
                                cfg.referrer = document.referrer;
                            }

                            $.ajax({
                                url: '//wzg.digi24.ro/index.php?postID=' + parseInt(cfg.identity),
                                data: cfg,
                                method: 'get'
                            });

                        } else {
                            console.log('APP-ANALYTICS: ping views - not allowed by throttle');
                        }
                    } else {
                        console.log('APP-ANALYTICS: ping views - not allowed for non-article');
                    }
                },
                canPing: function () {
                    var a = Math.floor((Math.random() * parseInt(this.randomNumber)) + 1);
                    if (a == this.randomNumber) {
                        return true;
                    }
                    return false;
                }

            };
        })(appEngine, $)
    );
})(appEngine, $);

/**
 * @INFO Added JS redirect for google shield
 */
(function () {
    if ( ! appEngine) {
        return;
    }

    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function updateQueryStringParameter(uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)", "i");
        if( value === undefined ) {
            if (uri.match(re)) {
                return uri.replace(re, '$1$2');
            } else {
                return uri;
            }
        } else {
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                var hash =  '';
                if( uri.indexOf('#') !== -1 ){
                    hash = uri.replace(/.*#/, '#');
                    uri = uri.replace(/#.*/, '');
                }
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                return uri + separator + key + "=" + value + hash;
            }
        }
    }

    if (appEngine.definitionGet('app.utils.isEnvWithRedirActive')()) {
        console.log('APP ENGINE redir active');

        var pSc = '__grsc';
        var pTs = '__grts';
        var pUa = '__grua';
        var pRn = '__grrn';

        if (window.location.search.indexOf(pSc) < 0) {

            var gotomCookie = getCookie('m2digi24ro');

            var oldUrl = window.location.href;
            var newUrl;

            var valUserAgent    = '1';                                                          // default User Agent
            var valUniqueStr    = '1'; // appEngine.definitionGet('app.utils.randomstr')(10);   // default unique str
            var valTime         = parseInt(parseInt((new Date()).getTime()) / (30 * 1000));     // default timestamp / 30 (cache for 30 secs = 30.000 milisecs)

            try {
                valUserAgent = appEngine.definitionGet('app.utils.md5')(window.navigator.userAgent);
            } catch (e) {
                valUserAgent = '0';
            }

            var uqsp = function (str, param, val) {
                return updateQueryStringParameter(str, param, val);
            };

            switch (gotomCookie) {
                case '1' :
                    console.log('APP ENGINE redir cookie 1');
                    if ( ! appEngine.definitionGet('app.utils.isMobileEnv')()) {
                        newUrl = uqsp(uqsp(uqsp(uqsp(oldUrl, pSc, 'cookieIsMobile'), pTs, valTime), pUa, valUserAgent), pRn, valUniqueStr);
                    }
                    break;
                case '0' :
                    console.log('APP ENGINE redir cookie 0');
                    if (appEngine.definitionGet('app.utils.isMobileEnv')()) {
                        newUrl = uqsp(uqsp(uqsp(uqsp(oldUrl, pSc, 'cookieIsDesktop'), pTs, valTime), pUa, valUserAgent), pRn, valUniqueStr);
                    }
                    break;
                default:
                    console.log('APP ENGINE redir cookie none');
                    if (appEngine.definitionGet('app.utils.isMobileEnv')()) {
                        newUrl = uqsp(uqsp(uqsp(uqsp(oldUrl, pSc, 'cookieIsUndef1'), pTs, valTime), pUa, valUserAgent), pRn, valUniqueStr);
                    } else {
                        newUrl = uqsp(uqsp(uqsp(uqsp(oldUrl, pSc, 'cookieIsUndef0'), pTs, valTime), pUa, valUserAgent), pRn, valUniqueStr);
                    }
                    break;
            }
            if (newUrl) {
                window.location.href = newUrl;
            }
        }
    }
})();

$(function () {
    if (! appEngine) {
        return;
    }

    // @INFO article init ("#article-content article" container)
    //
    // @IMPORTANT It runs over the article container (it runs first at page load, an after this it runs at infinite scroll at custom IAS event "rendered")
    //
    // @date 2016-09-20 Callbacks contained:
    // - initVideoInContainer (init video)
    // - initIframeInContainer (init iframe)
    // - initAnalyticsInternalPingInContainer (init view counter)
    // - initAnalyticsGtmContainer (init gtm)
    //
    // - initNavigationDigi24CodeContainer
    appEngine.registryGet('appArticleWidgets').runOver($('#article-content').find('article:first'));

    appEngine.registryGet('appArticleWidgets').runOver($('#article-content').find('.video-show'));

    // @INFO embed article init ("#articles-embed .app-video-embed" container)
    //
    // @IMPORTANT It runs over the embed article container (it runs only at page load)
    //
    // - initVideoInContainer (init video)
    //
    appEngine.registryGet('appArticleEmbedWidgets').runOver($('#articles-embed').find('.app-video-embed'));
    //
    // @INFO live init (".live-page" container) AND video article
    // @IMPORTANT It runs over the live container (it runs only at page load)
    //
    // - initVideoInContainer (init video)
    //
    appEngine.registryGet('appLiveWidgets').runOver($('.live-page'));

    appEngine.registryGet('appLiveHomepageWidgets').runOver($('#video-section-live-news'));

    appEngine.registryGet('appLiveHomepageWidgets').runOver($('#video-section-live-news-sidebar'));

    appEngine.registryGet('appInterviewHomepageWidgets').runOver($('#video-section-interview-news'));

    // @IMPORTANT It runs over the live container (it runs only at page load)
    //
    // @date 2016-09-20 It contained:
    // - initVideoInContainer (init video)
    //
    // @INFO live section form submit (window redirect with seo-url for tv stations)
    //
    appEngine.registryGet('appStickyWidgets').runOver($('#sticky'));

    // @INFO live section form submit (window redirect with seo-url for tv stations)
    appEngine.registryGet('appLiveFormWidgets').runOver($('form#form-live'));

    appEngine.registryGet('appForecastWidgets').runOver($('#forecast-cfg'));

    // @INFO shows section form submit (window redirect with seo-url for shows categories)
    appEngine.registryGet('appShowsFormWidgets').runOver($('form#form-shows'));

    // @INFO tv stars section filtering by shows categories
    appEngine.registryGet('appTvStarsFormWidgets').runOver($('form#form-tv-stars'));

    // @INFO digi-vox form (multi upload + ajax submit)
    appEngine.registryGet('appDigiVoxFormWidgets').runOver($('form#form-digivox'));

    // @INFO map widget (fake tabs)
    appEngine.registryGet('appContactWidgets').runOver($('#app-widget-contact'));

    // @INFO contact form (ajax submit)
    appEngine.registryGet('appContactFormWidgets').runOver($('form#form-contact'));

    // @INFO map widget (select option)
    appEngine.registryGet('appContactWidgetsMob').runOver($('#app-widget-contact-mob'));

    // @INFO newsletter form (ajax submit)
    appEngine.registryGet('appNewsletterFormWidgets').runOver($('form#form-newsletter-footer'));

    // @INFO Digi24CodeSection section form submit (window redirect with seo-url for Tv Channels )
    appEngine.registryGet('appTvChannelsWidgets').runOver($('form#form-tv-channels'));

    appEngine.registryGet('appTvStarsWidgets').runOver($('div.tv-stars-handler'));

    let canAllowTrackingCode = window.appCfg.gdprConsent.canAllowTrackingCode || false;

    if (canAllowTrackingCode) {
        appEngine.registryGet('appSatiAmplitudePlayer').runOver($('article[data-sati-section="podcast"]'));
    }

    // @INFO        Trigger article view (article analytics)
    // @IMPORTANT   Not required here because is triggered inside article (and on IAS render infinite scroll also)
    // @INFO        Not in use since 20.09.2016  (@author Traian.B)
    // appEngine.definitionGet('app.utils.appAnalyticsPageMetaPingV2').handleByMetaCfg(window.appPageMeta || {});

    $(document).on('displayCount', function(e){
        console.log('SATI-ANALYTICS: (re)ping views - on the road');

        if (typeof SATI_TrackView === "function") {
            SATI_TrackView(document.location.href, document.referrer);
        }
    });

    document.addEventListener('historyTrigger', function(e) {
        console.log('SATI-ANALYTICS: (re)ping views - on the road');

        if (typeof SATI_TrackView === "function") {
            SATI_TrackView(document.location.href, document.referrer);
        }
    });

    window.addEventListener('pageshow', (event) => {
        // Send another pageview if the page is restored from bfcache.
        if (event.persisted) {
            console.log('SATI-ANALYTICS: ping from bfcache views - on the road');
            SATI_TrackView(document.location.href, document.referrer);
        }
    });



});

